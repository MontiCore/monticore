/* (c) https://github.com/MontiCore/monticore */
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  id "de.set.ecj" version "1.4.1" // Eclipse compiler as it's much faster than javac
  id "org.sonarqube" version "3.0"
  id "jacoco"
  id 'org.barfuin.gradle.jacocolog' version '1.2.3'
  id "monticore"
}

sonarqube {
  properties {
    property 'sonar.host.url', 'https://metric.se.rwth-aachen.de'
    property 'sonar.sourceEncoding', 'UTF-8'
    property 'sonar.projectKey', 'de.monticore:monticore'
    property 'sonar.exclusions', '**/target/generated-sources/**'
    property 'sonar.jacoco.reportPath', 'target/jacoco/jacocoMergeSubprojects.exec'
  }
}

if(!hasProperty('bootstrap')){
  allprojects {
    group = "de.monticore"
  }
} else {
  allprojects {
    group = "de.monticore.bs"
  }
}

allprojects {
  
  ext.grammarDir = 'src/main/grammars'
  buildDir = file("$projectDir/target")
  
  repositories {
    if(("true").equals(getProperty('useLocalRepo'))){
      mavenLocal()
    }
    maven {
      credentials.username mavenUser
      credentials.password mavenPassword
      url repo
    }
    mavenCentral()
  }

}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'de.set.ecj'


  tasks.withType(Test) {
    useJUnit()
    testLogging {
      // controls whether test output is shown
      showStandardStreams= ("false").equals(getProperty('showTestOutput'))? false : true
      showExceptions true
      showCauses true
      showStackTraces true
      exceptionFormat TestExceptionFormat.FULL
      info {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
      }
    }
    afterTest { desc, result ->
      logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
    }
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        logger.lifecycle startItem + output + endItem
      }
    }
    reports {
      junitXml.enabled = false
      html.enabled = false
    }
  }
  
  
  sourceCompatibility = '11'
  
  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.deprecation false
    options.warnings = false
    options.fork = true
    options.headerOutputDirectory.convention(null)
    options.forkOptions.with {
      // executable = 'java'
      jvmArgs = ['-classpath', project.configurations.ecj.asPath, 'org.eclipse.jdt.internal.compiler.batch.Main', '-nowarn', "-Xmx2048m"]
    }
  }
  java {
    withSourcesJar()
  }
  
  
}

/**
 *  Builds the core projects, i.e. the generator, runtime and grammar library.
 *  Executes JUnit tests and assembles the jars.
 */
task buildMC {
  group("build")
  description('Builds the core projects, i.e. the generator, runtime and grammar library.')
  dependsOn(
          ":monticore-grammar:build",
          ":monticore-runtime:build",
          ":monticore-runtime-emf:build",
          ":monticore-grammar-emf:build"
  
  )
}

if(!hasProperty('bootstrap')) {
  buildMC.dependsOn(gradle.includedBuilds*.task(':build'))
}

/**
 *  Assembles the core projects, i.e. the generator, runtime and grammar library.
 *  Assembles the jars but does not execute JUnit tests.
 */
task assembleMC {
  group("build")
  description('Assembles the core projects, i.e. the generator, runtime and grammar library.')
  
  dependsOn(
          ":monticore-grammar:assemble",
          ":monticore-runtime:assemble",
          ":monticore-runtime-emf:assemble",
          ":monticore-grammar-emf:assemble"
  
  )
}
if(!hasProperty('bootstrap')) {
  assembleMC.dependsOn(gradle.includedBuilds*.task(':assemble'))
}

/**
 *  Executes JUnit tests of the core projects, i.e. the generator, runtime and grammar library.
 */
task testMC {
  group("build")
  description('Tests the core projects, i.e. the generator, runtime and grammar library.')
  
  dependsOn(
          ":monticore-grammar:test",
          ":monticore-runtime:test",
          ":monticore-runtime-emf:test",
          ":monticore-grammar-emf:test"
  
  )
}

if(!hasProperty('bootstrap')) {
  testMC.dependsOn(gradle.includedBuilds*.task(':test'))
}

/**
 *  Publishes the jars of the core projects, i.e. the generator, runtime and grammar library
 *  to the nexus repository.
 *  Assembles the jars and publishes them, but does not execute JUnit tests.
 */
task deployMC {
  group("build")
  description('Publishes the core projects, i.e. the generator, runtime and grammar library.')
  
  dependsOn(
          ":monticore-grammar:publish",
          ":monticore-runtime:publish",
          ":monticore-runtime-emf:publish",
          ":monticore-grammar-emf:publish"
  
  )
}

if(!hasProperty('bootstrap')) {
  deployMC.dependsOn(gradle.includedBuilds*.task(':publish'))
}

/**
 *  Publishes the jars of the core projects, i.e. the generator, runtime and grammar library
 *  to the local m2 repository. Typically this should not be needed.
 *  Assembles the jars and publishes them, but does not execute JUnit tests.
 */
task publishMCToMavenLocal {
  group("build")
  description('Publishes the core projects, i.e. the generator, runtime and grammar library' +
          'to the local maven repository.')
  dependsOn(
          ":monticore-grammar:publishToMavenLocal",
          ":monticore-runtime:publishToMavenLocal",
          ":monticore-runtime-emf:publishToMavenLocal",
          ":monticore-grammar-emf:publishToMavenLocal"
  )
}

if(!hasProperty('bootstrap')) {
  publishMCToMavenLocal.dependsOn(gradle.includedBuilds*.task(':publishToMavenLocal'))
}

/**
 *  Build the test projects, i.e. integration tests and experiments.
 *  This includes code generation for these projects and JUnit tests.
 */
if(!hasProperty('bootstrap')) {
  task testIT {
    group("build")
    description('Build the test projects, i.e. integration tests and experiments.')
    
    dependsOn(
            project(":monticore-test").subprojects.collect {
              it.tasks.getByName "test"
            }
    )
  }
}
  
  
task buildAll(type: GradleBuild) {
  dependsOn(subprojects.collect { getTasksByName("build", false) })
}

task cleanMC {
  dependsOn(
          ":monticore-grammar:clean",
          ":monticore-runtime:clean",
          ":monticore-runtime-emf:clean",
          ":monticore-grammar-emf:clean"
  
  )
}

if (!hasProperty('bootstrap')) {
  cleanMC.dependsOn(
          project(":monticore-test").subprojects.collect {
            it.tasks.getByName "clean"
          }
  )
}

task sonarMC (type: GradleBuild) {
  description('Generates code coverage')
  dependsOn(
          ":testMC"
  )
  tasks = [ 'jacocoMergeSubprojects', 'sonarqube' ]
}


configure([project(':monticore-grammar'),
           project(':monticore-grammar-emf'),
           project(':monticore-runtime'),
           project(':monticore-runtime-emf')]){
  apply plugin: 'maven-publish'
  
  // configure deployment
  publishing {
    publications {
      maven(MavenPublication) {
        from(components.java)
      }
    }
    repositories.maven {
      credentials.username mavenUser
      credentials.password mavenPassword
      def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
      def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}

defaultTasks 'build'

