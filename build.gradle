/* (c) https://github.com/MontiCore/monticore */
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
  // Eclipse compiler as it's much faster than javac
  // Since the root project does not contain java code, it is only applied to the subprojects
  id "io.github.themrmilchmann.ecj" version "0.2.0" apply false
  id "org.sonarqube" version "3.0"
  id "jacoco"
  id 'org.barfuin.gradle.jacocolog' version '1.2.3'
}

sonarqube {
  properties {
    property 'sonar.host.url', 'https://metric.se.rwth-aachen.de'
    property 'sonar.sourceEncoding', 'UTF-8'
    property 'sonar.projectKey', 'de.monticore:monticore'
    property 'sonar.exclusions', '**/target/generated-sources/**'
    property 'sonar.jacoco.reportPath', 'target/jacoco/jacocoMergeSubprojects.exec'
  }
}

allprojects {
  group = "de.monticore"

  ext.grammarDir = 'src/main/grammars'
  buildDir = file("$projectDir/target")

  repositories {
    if(("true").equals(getProperty('useLocalRepo'))){
      mavenLocal()
    }
    maven {
      credentials.username mavenUser
      credentials.password mavenPassword
      url repo
    }
    mavenCentral()
  }

}

subprojects {
  apply plugin: 'java-library'
  apply plugin: 'io.github.themrmilchmann.ecj'


  tasks.withType(Test) {
    useJUnit()
    testLogging {
      // controls whether test output is shown
      showStandardStreams= ("false").equals(getProperty('showTestOutput'))? false : true
      showExceptions true
      showCauses true
      showStackTraces true
      exceptionFormat TestExceptionFormat.FULL
      info {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
      }
    }
    afterTest { desc, result ->
      logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
    }
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        logger.lifecycle startItem + output + endItem
      }
    }
    reports {
      junitXml.required = false
      html.required = false
    }
  }

  tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.encoding = "UTF-8"
    options.deprecation false
    options.warnings = false
    options.forkOptions.jvmArgs += ["-Xmx4G"]
    // TODO: reevaluate with new ecj plugin
    outputs.cacheIf {false} // ECJ has problem with caching
  }
  java {
    withSourcesJar()
    toolchain {
      languageVersion = JavaLanguageVersion.of(11)
    }
  }
  
  
}

/**
 *  Builds the core projects, i.e. the generator, runtime and grammar library.
 *  Executes JUnit tests and assembles the jars.
 */
task buildMC {
  group("build")
  description('Builds the core projects, i.e. the generator, runtime and grammar library.')
  dependsOn ":monticore-grammar:build"
  dependsOn ":monticore-runtime:build"
  if(("true").equals(getProperty('genEMF'))) {
    dependsOn ":monticore-runtime-emf:build"
    dependsOn ":monticore-grammar-emf:build"
  }
}

buildMC.dependsOn(gradle.includedBuilds*.task(':build'))

/**
 *  Assembles the core projects, i.e. the generator, runtime and grammar library.
 *  Assembles the jars but does not execute JUnit tests.
 */
task assembleMC {
  group("build")
  description('Assembles the core projects, i.e. the generator, runtime and grammar library.')
  dependsOn ":monticore-grammar:assemble"
  dependsOn ":monticore-runtime:assemble"
  if(("true").equals(getProperty('genEMF'))) {
    dependsOn ":monticore-runtime-emf:assemble"
    dependsOn ":monticore-grammar-emf:assemble"
  }
}

assembleMC.dependsOn(gradle.includedBuilds*.task(':assemble'))


/**
 *  Executes JUnit tests of the core projects, i.e. the generator, runtime and grammar library.
 */
task testMC {
  group("build")
  description('Tests the core projects, i.e. the generator, runtime and grammar library.')

  dependsOn ":monticore-grammar:test"
  dependsOn ":monticore-runtime:test"
  if(("true").equals(getProperty('genEMF'))) {
    dependsOn ":monticore-runtime-emf:test"
    dependsOn ":monticore-grammar-emf:test"
  }
}

testMC.dependsOn(gradle.includedBuilds*.task(':test'))

/**
 *  Publishes the jars of the core projects, i.e. the generator, runtime and grammar library
 *  to the nexus repository.
 *  Assembles the jars and publishes them, but does not execute JUnit tests.
 */
task deployMC {
  group("build")
  description('Publishes the core projects, i.e. the generator, runtime and grammar library.')

  dependsOn ":monticore-grammar:publish"
  dependsOn ":monticore-runtime:publish"
  if(("true").equals(getProperty('genEMF'))) {
    dependsOn ":monticore-runtime-emf:publish"
    dependsOn ":monticore-grammar-emf:publish"
  }

}

deployMC.dependsOn(gradle.includedBuilds*.task(':publish'))

/**
 *  Publishes the jars of the core projects, i.e. the generator, runtime and grammar library
 *  to the local m2 repository. Typically this should not be needed.
 *  Assembles the jars and publishes them, but does not execute JUnit tests.
 */
task publishMCToMavenLocal {
  group("build")
  description('Publishes the core projects, i.e. the generator, runtime and grammar library' +
          'to the local maven repository.')
  dependsOn ":monticore-grammar:publishToMavenLocal"
  dependsOn ":monticore-runtime:publishToMavenLocal"
  if(("true").equals(getProperty('genEMF'))) {
    dependsOn ":monticore-runtime-emf:publishToMavenLocal"
    dependsOn   ":monticore-grammar-emf:publishToMavenLocal"
  }
}

publishMCToMavenLocal.dependsOn(gradle.includedBuilds*.task(':publishToMavenLocal'))

/**
 *  Build the test projects, i.e. integration tests and experiments.
 *  This includes code generation for these projects and JUnit tests.
 */
task testIT {
  group("build")
  description('Build the test projects, i.e. integration tests and experiments.')

  dependsOn(
          project(":monticore-test").subprojects.collect {
            it.tasks.getByName "test"
          }
  )
}

  
  
task buildAll(type: GradleBuild) {
  dependsOn(subprojects.collect { getTasksByName("build", false) })
}

task cleanMC {
  dependsOn ":monticore-grammar:clean"
  dependsOn ":monticore-runtime:clean"
  if(("true").equals(getProperty('genEMF'))) {
    dependsOn ":monticore-runtime-emf:clean"
    dependsOn   ":monticore-grammar-emf:clean"
  }
}

cleanMC.dependsOn(
        project(":monticore-test").subprojects.collect {
          it.tasks.getByName "clean"
        }
)


task sonarMC (type: GradleBuild) {
  description('Generates code coverage')
  dependsOn(
          ":testMC"
  )
  tasks = [ 'jacocoMergeSubprojects', 'sonarqube' ]
}

def projectsToConfigure = [
  project(':monticore-grammar'),
  project(':monticore-runtime')]
if(("true").equals(getProperty('genEMF'))) {
    projectsToConfigure << project(':monticore-grammar-emf')
    projectsToConfigure << project(':monticore-runtime-emf')
}
configure(projectsToConfigure){
  apply plugin: 'maven-publish'
  
  // configure deployment
  publishing {
    publications {
      maven(MavenPublication) {
        from(components.java)
      }
    }
    repositories.maven {
      credentials.username mavenUser
      credentials.password mavenPassword
      def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
      def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
  }
}

defaultTasks 'build'

