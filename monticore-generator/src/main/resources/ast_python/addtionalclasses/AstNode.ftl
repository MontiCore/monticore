<#--
****************************************************************************
MontiCore Language Workbench, www.monticore.de
Copyright (c) 2017, MontiCore, All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived from this
software without specific prior written permission.

This software is provided by the copyright holders and contributors
"as is" and any express or implied warranties, including, but not limited
to, the implied warranties of merchantability and fitness for a particular
purpose are disclaimed. In no event shall the copyright holder or
contributors be liable for any direct, indirect, incidental, special,
exemplary, or consequential damages (including, but not limited to,
procurement of substitute goods or services; loss of use, data, or
profits; or business interruption) however caused and on any theory of
liability, whether in contract, strict liability, or tort (including
negligence or otherwise) arising in any way out of the use of this
software, even if advised of the possibility of such damage.
****************************************************************************
-->
<#-- This template is required in order to generate the AST superclass in python. -->
from Comment import Comment
from SourcePosition import SourcePosition
from abc import ABCMeta

# generated by template ast_python.addtionalclasses.AstNode
class AstNode(object):
    """
    Foundation class for all arbitrary AST classes.
    """
    start = None
    end = None
    precomments = list()
    postcomments = list()


    def __init__(_start=None, _end=None, _precomments = list(), _postcomments = list()):
        self.start = _start
        self.end = _end
        self.precomments = _precomments
        self.postcomments = _postcomments

    def getSourcePositionEnd(self):
        """
        Returns the start position of this ASTNode
        :return start position of this ASTNode
        :rtype SourcePosition
        """
        if self.end is not None:
            return self.end
        else:
            return SourcePosition.getDefaultSourcePosition()

    def setSourcePositionEnd(self, _end = None):
        """
        Sets the end position of this ASTNode
        :param _end end position of this ASTNode
        :type _end SourcePosition
        """
        assert (_end is not None and isinstance(_end, SourcePosition)), 'Not a valid source position object!'
        self.end = _end

    def getSourcePositionStart(self):
        """
        Returns the start source position of this ASTNode
        :return start position of this ASTNode
        :rtype SourcePosition
        """
        if self.start is not None:
            return self.start
        else:
            return SourcePosition.getDefaultSourcePosition()

    def setSourcePositionStart(self, _start = None):
        """
        Sets the start position of this ASTNode
        :param _start: start position of this ASTNode
        :type _start: SourcePosition
        """
        assert (_start is not None and isinstance(_start, SourcePosition)), 'Not a valid source position object!'
        self.start = _start

    def getPreComments(self):
        """
        Returns list of all comments which are associated with this ASTNode and are
        prior to the ASTNode in the input file
        :return list of comments
        :rtype list(Comment)
        """
        return self.precomments

    def setPreComments(self, _precomments = None):
        """
        Sets list of all comments which are associated with this ASTNode and are
        prior to the ASTNode in the input file
        :param _precomments: list of comments
        :param _precomments: list(Comment)
        """
        assert (_precomments is not None and isinstance(_precomments, list)), 'Not a valid precomment collection object!'
        self.precomments = _precomments

    def getPostComments(self):
        """
        Returns list of all comments which are associated with this ASTNode and can
        be found after the ASTNode in the input file
        :return list of comments
        :rtype list(Comment)
        """
        return self.postcomments

    def setPostComments(self, _postcomments = None):
        """
        Sets list of all comments which are associated with this ASTNode and can be
        found after the ASTNode in the input file.
        :param _postcomments list of comments
        :type _postcomments: list(Comment)
        """
        assert (_postcomments is not None and isinstance(_postcomments, list)), 'Not a valid postcomments collection object!'
        self.postcomments = _postcomments

    def deepClone(self, _result = None ):
        """
        Performs a deep clone of this ASTNode and all of its successors
        :return Clone of current ASTNode with a parent which is equal to null
        """
        assert (_result is not None),\
            "0xA4040 The argument ASTNode of the 'deepClone' method must not be null."
        if _result is not None:
            _result.setSourcePositionStart(self.getSourcePositionStart().clone())
            _result.setSourcePositionEnd(self.getSourcePositionEnd().clone())

            for x in self.getPreComments():
                _result.getPreComments().append(Comment(x.getText()))

            for x in self.getPostComments():
                _result.getPostComments().append(Comment(x.getText()))

            return _result
        else:
            pass

    def equalAttributes(self, _o = None):
        """
        :param _o: an arbitrary object
        :type _o: object
        :return True if attributes equal, otherwise False.
        :rtype bool
        """
        if _o is None:
            return False
        raise CompareNotSupportedException("0xA4041 Method equalAttributes is not implemented properly in class: " + str(type(_o)))

    def equalsWithComments(self, _o = None ):
        """
        :param _o: a single object
        :type _o: object
        :return True, if equal with comments.
        :rtype bool
        """
        if _o is None:
            return False
        raise CompareNotSupportedException("0xA4042 Method equalsWithComments is not implemented properly in class: "+ str(type(_o)))

    def deepEquals(self, _o = None, _forceSameOrder = False ):
        """
        Compare this object to another Object. Do not take comments into account.
        :param _o: the object to compare this node to
        :type _o: object
        :param _forceSameOrder: consider the order in ancestor lists, even if these  lists are of stereotype <tt>&lt;&lt;unordered&gt;&gt;</tt> in the grammar.
        :type _forceSameOrder: bool
        :return True, if deep equality is given, otherwise false
        """
        if _o is None:
            return False
        raise CompareNotSupportedException("0xA4045 Method deepEquals is not implemented properly in class: " + str(type(_o)))

    def deepEqualsWithComments(self, _o = None, _forceSameOrder = False ):
        """
        Compare this object to another Object. Take comments into account. This
        method returns the same value as <tt>deepEqualsWithComment(Object o, boolean forceSameOrder)</tt> method
        when using the default value for forceSameOrder of each Node.
        :param _o: a single object
        :type _o: object
        :param _forceSameOrder: force the same order of elements
        :type _forceSameOrder: bool
        :return True if equal, otherwise False.
        :bool
        """
        if _o is None:
            return False
        raise CompareNotSupportedException("0xA4046 Method deepEqualsWithComments is not implemented properly in class: " + str(type(_o)))


class CompareNotSupportedException(Exception):
    """
    This exception indicates that a operation is not yet implemented.
    """
    pass

