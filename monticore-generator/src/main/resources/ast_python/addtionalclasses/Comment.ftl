<#--
****************************************************************************
MontiCore Language Workbench, www.monticore.de
Copyright (c) 2017, MontiCore, All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
contributors may be used to endorse or promote products derived from this
software without specific prior written permission.

This software is provided by the copyright holders and contributors
"as is" and any express or implied warranties, including, but not limited
to, the implied warranties of merchantability and fitness for a particular
purpose are disclaimed. In no event shall the copyright holder or
contributors be liable for any direct, indirect, incidental, special,
exemplary, or consequential damages (including, but not limited to,
procurement of substitute goods or services; loss of use, data, or
profits; or business interruption) however caused and on any theory of
liability, whether in contract, strict liability, or tort (including
negligence or otherwise) arising in any way out of the use of this
software, even if advised of the possibility of such damage.
****************************************************************************
-->
<#-- This template is required for correct storage of comments in the ast.
     Caution: This file is not automatically generated and has to be adjusted in the case the grammar is changed.
-->
from SourcePosition import SourcePosition


# generated by template ast_python.addtionalclasses.Comment
class Comment(object):
    """
    Class represents a comment (contains the comment and the start- and end-position)
    """
    start = SourcePosition.getDefaultSourcePosition()
    end = SourcePosition.getDefaultSourcePosition()
    text = None

    def __init__(self, _text=None):
        """
        Constructor of this class
        :param _text: the comment text
        :type _text: str
        """
        self.text = _text

    def getSourcePositionEnd(self):
        """
        Returns the source position end of this comment.
        :return the source position object
        :rtype SourcePosition
        """
        return self.end

    def setSourcePositionEnd(self, _end=None):
        """
        Sets the source position end of this object.
        :param _end the source position of the end
        :type _end: SourcePosition
        """
        self.end = _end

    def getSourcePositionStart(self):
        """
        Returns the source position start of this comment.
        :return the source position object
        :rtype SourcePosition
        """
        return self.start

    def setSourcePositionStart(self, _start=None):
        """
        Sets the source position start of this comment.
        :param _start the source position of the start
        :type _start: SourcePosition
        """
        self.start = _start

    def __str__(self):
        """
        Returns a string representation of the text.
        :return a string representation of the text.
        :rtype str
        """
        return str(self.text)

    def getText(self):
        """
        Returns the text.
        :return the text of the comment.
        :rtype str
        """
        return self.text

    def setText(self, _text=None):
        """
        Sets the text of the comment.
        :param _text the new text
        :type _text: str
        """
        self.text = _text

    def equals(self, _o=None):
        """
        The equals method.
        :param _o a different object.
        :type _o: object
        """
        if isinstance(_o,Comment):
            return self.text == _o.getText
        return False
