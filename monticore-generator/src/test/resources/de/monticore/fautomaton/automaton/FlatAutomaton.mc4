package de.monticore.fautomaton.automaton;

grammar FlatAutomaton {

   token Name =
        ( 'a'..'z' | 'A'..'Z' | '_' | '$' )( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' )*;

	/** An finite automaton
	@attribute name Name of the automaton
    @attribute State List of all states
    @attribute Transition List of all transitions
	*/
	Automaton =
	   "automaton" Name "{" 
	     (State | Transition )*// (names : Name)* (impState:State)
	   "}";

    /** A state in a finite automaton
    @attribute name Name of the state
    @attribute final True if state is final
    @attribute initial True if state is initial
    */
	State =
	  "state" Name
	  (("<<" initial:["initial"] ">>" ) | ("<<" final:["final"] ">>" ))* ";"  ;

    /** A transition in a finite automaton
    @attribute from The source of the transition
    @attribute activate Character that triggers the transition
    @attribute to The target of the transition
    */
	Transition =
	  from:Name "-" activate:Name ">" to:Name ";"  ;
	  
	
	interface A0;
	
	ast A0 = VarnameA0:Name ;
	
	interface A1 extends A0;
	
	ast A1 = VarnameA1:Name  dimensions:int;
	
	interface B0;
	
	ast B0 = VarnameB0:Name;
	
	interface B1 extends B0;
	
	ast B1 = VarnameB1:Name;
	
	M implements A1, B1 = VarnameM:Name;
	
	interface C0;
	
	ast C0 = VarnameC0:Name;
	
	interface C1 extends C0;
	
	ast C1 = VarnameC1:Name;
	
	P extends M  implements C1 = VarnameP:Name;
	
    P1  implements C1 extends M  = VarnameP1:Name;
	  	
}