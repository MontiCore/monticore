/* (c) https://github.com/MontiCore/monticore */
import de.monticore.MCTask
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
plugins {
   id "de.set.ecj" version "1.4.1" // Eclipse compiler as it's much faster than javac
  id "monticore" version "6.1.0.1-SNAPSHOT" // MontiCore Plugin
}
allprojects {
  group = 'de.monticore'
  version = '6.1.0.1-SNAPSHOT'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'monticore'
  apply plugin: 'de.set.ecj'
  
  buildDir = file("$projectDir/target")
  
  ext.grammarDir = 'src/main/grammars'
  ext.grammar_version = '6.1.0.1-SNAPSHOT'
  ext.mc_version = '6.1.0.1-SNAPSHOT'
  ext.junit_version = '4.12'
  ext.outDir = "$buildDir/generated-sources/monticore/sourcecode"
  
  dependencies {
    implementation group:'de.monticore', name:'monticore-runtime', version:grammar_version
    implementation group:'de.monticore', name:'monticore-grammar', version:grammar_version
    testImplementation group:'junit', name:'junit', version:junit_version
    grammar group:'de.monticore', name:'monticore-grammar', version:grammar_version, classifier:"grammars"
    grammar group:'de.monticore', name:'monticore-runtime', version:grammar_version
  }
  
  test {
    testLogging {
      // controls whether test output is shown
      showStandardStreams= ("false").equals(getProperty('showTestOutput'))? false : true
      showExceptions true
      showCauses true
      showStackTraces true
      events TestLogEvent.FAILED
              TestLogEvent.STANDARD_OUT
      exceptionFormat TestExceptionFormat.FULL
      info {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
      }
    }
    reports {
      junitXml.enabled = false
      html.enabled = false
    }
  }

  repositories {
    maven {
      credentials.username mavenUser
      credentials.password mavenPassword
      url repo
    }
    mavenLocal()
  }
  
  sourceSets {
    main.java.srcDirs += [ outDir ]
  }
  
  // Fixes issue with java plugin in projects without resources
  compileTestJava.doFirst { mkdir sourceSets.main.output.resourcesDir }
  
    sourceCompatibility = '1.8'
  
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.deprecation false
    options.warnings = false
  }
  
  compileJava {
    dependsOn project.collect { it.tasks.withType(MCTask) }
  }

}
