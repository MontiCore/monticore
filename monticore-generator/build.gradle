/* (c) https://github.com/MontiCore/monticore */
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    dependencies {
        classpath "de.se_rwth.commons:se-commons-gradle:$se_commons_version"
    }
}

plugins {
    id "java-library"
    id "io.github.themrmilchmann.ecj" version "0.2.0" // Eclipse compiler as it's much faster than javac
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id 'groovy-gradle-plugin'
    id 'maven-publish'
    id "jacoco"
}

description = 'MontiCore: Generator'
group = "de.monticore"

ext.grammarDir = 'src/main/grammars'
buildDir = file("$projectDir/target")

repositories {
    if (("true").equals(getProperty('useLocalRepo'))) {
        mavenLocal()
    }
    maven {
        url repo
    }
    mavenCentral()
}

dependencies {
    implementation gradleApi()

    implementation "de.se_rwth.commons:se-commons-gradle:$se_commons_version"

    implementation "de.monticore:monticore-runtime:$previous_mc_version"
    implementation "de.monticore:monticore-grammar:$previous_mc_version"
    implementation "de.se_rwth.commons:se-commons-groovy:$se_commons_version"
    implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
    implementation "de.se_rwth.commons:se-commons-gradle:$se_commons_version"

    implementation "org.apache.commons:commons-lang3:$commons_lang3_version"
    implementation "org.freemarker:freemarker:$freemarker_version"
    implementation "commons-cli:commons-cli:$commons_cli_version"
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'

//  implementation 'org.slf4j:slf4j-api:1.7.10'
    implementation 'ch.qos.logback:logback-classic:1.2.0'
    implementation 'ch.qos.logback:logback-core:1.2.0'

    implementation "de.monticore.lang:cd4analysis:$cd4a_version"
    implementation "org.antlr:antlr4:$antlr_version"
    implementation 'org.apache.groovy:groovy:4.0.2'
    implementation("com.google.guava:guava:$guava_version")
    implementation "org.apache.commons:commons-lang3:$commons_lang3_version"
    testImplementation 'com.github.javaparser:javaparser-symbol-solver-core:3.24.2'
    testImplementation "junit:junit:$junit_version"
    testImplementation 'org.mockito:mockito-core:4.5.1'

}

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.encoding = "UTF-8"
    options.deprecation false
    options.warnings = false
}
java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}


tasks.withType(Test) {
    useJUnit()

    testLogging {
        // controls whether test output is shown
        showStandardStreams = !("false").equals(getProperty('showTestOutput'))
        showExceptions true
        showCauses true
        showStackTraces true
        exceptionFormat TestExceptionFormat.FULL
        info {
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_OUT
        }
    }
    afterTest { desc, result ->
        logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
    }
    afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
            def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            def startItem = '|  ', endItem = '  |'
            logger.lifecycle startItem + output + endItem
        }
    }
    reports {
        junitXml.required = false
        html.required = false
    }
}

shadowJar { // all in one jar
    manifest {
        attributes "Main-Class": "de.monticore.cli.MontiCoreTool"
    }
    archiveClassifier = "mc-tool"
    zip64 true
}

tasks.register("buildInfo", de.monticore.gradle.common.MCBuildInfoTask) {}

processResources.dependsOn("buildInfo")

def pluginName = 'monticore'

gradlePlugin.plugins {
    monticore {
        id = pluginName
        implementationClass = 'de.monticore.MCPlugin'
    }
    // New version of our plugin (supporting incremental builds)
    monticoreGenerator {
        id = "de.monticore.generator"
        implementationClass = 'de.monticore.gradle.MCGeneratorPlugin'
    }
}

publishing {
    // The gradle-plugin plugin deploys automatically a pluginMaven publication (from the main component)
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
    }
}
