/* generated from model BasicSymbols */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.visitor;


import de.monticore.ast.ASTNode;
import de.monticore.symboltable.IScope;
import de.monticore.symboltable.IScopeSpanningSymbol;
import de.monticore.symboltable.ISymbol;
import de.monticore.symboltable.SymbolWithScopeOfUnknownKind;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public interface ITraverser {

  default void add4IVisitor(IVisitor iVisitor) {
  }

  default List<IVisitor> getIVisitorList() {
    return new ArrayList<>();
  }

  // ASTNode
  default void handle(ASTNode node) {
    visit(node);
    // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
    endVisit(node);
  }

  default void visit(ASTNode node) {
    getIVisitorList().forEach(v -> v.visit(node));
  }

  default void endVisit(ASTNode node) {
    getIVisitorList().forEach(v -> v.endVisit(node));
  }

  // ISymbol
  default void handle(ISymbol symbol) {
    visit(symbol);
    // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
    endVisit(symbol);
  }

  default void visit(ISymbol symbol) {
    getIVisitorList().forEach(v -> v.visit(symbol));
  }

  default void endVisit(ISymbol symbol) {
    getIVisitorList().forEach(v -> v.endVisit(symbol));
  }

  // IScopeSpanningSymbol
  default void handle(IScopeSpanningSymbol symbol) {
    visit(symbol);
    // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
    endVisit(symbol);
  }

  default void visit(IScopeSpanningSymbol symbol) {
    getIVisitorList().forEach(v -> v.visit(symbol));
  }

  default void endVisit(IScopeSpanningSymbol symbol) {
    getIVisitorList().forEach(v -> v.endVisit(symbol));
  }

  // IScope
  default void handle(IScope scope) {
    visit(scope);
    // no traverse() for abstract classes, interfaces and enums, only concrete classes are traversed
    endVisit(scope);
  }

  default void visit(IScope scope) {
    getIVisitorList().forEach(v -> v.visit(scope));
  }

  default void endVisit(IScope scope) {
    getIVisitorList().forEach(v -> v.endVisit(scope));
  }

  default void traverse(IScope scope) {
    for (SymbolWithScopeOfUnknownKind s : scope.getLocalUnknownSymbols()) {
      s.accept(this);
    }
  }

  default void handle(SymbolWithScopeOfUnknownKind symbol) {
    visit(symbol);
    traverse(symbol);
    endVisit(symbol);
  }

  default void visit(SymbolWithScopeOfUnknownKind symbol) {
    getIVisitorList().forEach(v -> v.visit(symbol));
  }

  default void endVisit(SymbolWithScopeOfUnknownKind symbol) {
    getIVisitorList().forEach(v -> v.endVisit(symbol));
  }

  default void traverse(SymbolWithScopeOfUnknownKind symbol) {}

  Set<Object> getTraversedElements();

  void setTraversedElements(Set<Object> traversedElements);

  default void addTraversedElement(Object element) {
    getTraversedElements().add(element);
  }

  default void addAllTraversedElements(Set<Object> elements) {
    getTraversedElements().addAll(elements);
  }

  default void clearTraversedElements() {
    getTraversedElements().clear();
  }

}
