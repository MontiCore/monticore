# (c) https://github.com/MontiCore/monticore
image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:7.4.2-jdk11

#include:
#  - template: Code-Quality.gitlab-ci.yml
#
variables:
  MC_MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2"
  GRADLE_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2"
  MC_MAVEN_CLI_OPTS: "--settings settings.xml --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  SONAR_OPTS: "-Dsonar.login=$sonarUser -Dsonar.password=$sonarPassword"


before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

#cache:
#  paths:
#    - .m2/
#    - .gradle/wrapper
#  key: ${CI_COMMIT_REF_SLUG} # Cache per branch

stages:
  - build
  - test
  - deploy
  - trigger_languages
  - sonar
  - report
  - check
  - mirror

build:
  stage: build
  script:
    - "cd monticore-generator && gradle build $GRADLE_OPTS -Pci -i"
    - "cd .. && gradle buildMC $GRADLE_OPTS -Pci -PgenTR=true -PgenEMF=true -PgenTagging=true -i --max-workers=4 --stacktrace"
  artifacts:
    paths:
      - ".gradle"
      - "*/target"
      - "*/.gradle"
    expire_in: 1 week
  only:
    - merge_requests
    - branches
  except:
    - master

# Checks if the links in this repository's Markdown files are valid.
#
# For more information, visit: https://git.rwth-aachen.de/se/infrastructure/mdlinkchecker (Available internally only)
check-links:
  # We need a JDK 17+ image for this job since the link checker requires Java 17.
  image: eclipse-temurin:17-jdk-alpine
  # The check runs parallel to the build since project documentation is not generated.
  stage: build
  # Allow failure regardless of whether the tool exists with a non-zero error code. We don't currently want to fail the
  # pipeline if a link is invalid.
  allow_failure: true
  before_script:
    - 'apk --no-cache add curl'
  script:
    - 'curl --location --header "PRIVATE-TOKEN: $secibuildinfstrtoken" "https://git.rwth-aachen.de/api/v4/projects/se%2Finfrastructure%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkCheckerCLI.jar?job=build" --output MDLinkChecker.jar'
    - 'java -jar MDLinkChecker.jar -t "$secibuildtoken" -r . -p'

test_01experiments:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/01.experiments build $GRADLE_OPTS -PgenEMF=true -Pci --max-workers=4 --stacktrace"
  only:
    - merge_requests
    - branches
  except:
    - master

test_02experiments:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/02.experiments build $GRADLE_OPTS -PgenEMF=true -Pci --max-workers=4 --stacktrace"
  only:
    - merge_requests
    - branches
  except:
    - master

test_it:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/it build $GRADLE_OPTS -Pci --max-workers=4 --stacktrace"
# This check must run in a stage where the monticore-generator was executed, otherwise no relevant file handles are opened.
# Problems can be investigated on small examples projects with https://github.com/jenkinsci/lib-file-leak-detector
    - echo "Checking that all file handles in the target folder are closed"
    - if pgrep java | xargs -i ls -la /proc/{}/fd | grep "monticore-test/it/target/"; then echo "Found open file handles!"; exit 1; else echo "No open file handles."; exit 0; fi
  only:
    - merge_requests
    - branches
  except:
    - master

test_it_emf:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/it build -PbuildProfile=emf -PgenEMF=true $GRADLE_OPTS -Pci --max-workers=4 --stacktrace"
  only:
    - merge_requests
    - branches
  except:
    - master

test_grammar_it:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/monticore-grammar-it build $GRADLE_OPTS -PgenEMF=true -Pci --max-workers=4 --stacktrace"
  only:
    - merge_requests
    - branches
  except:
    - master

test_montitrans:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/montitrans build $GRADLE_OPTS -PgenTR=true -PgenEMF=true -PgenTagging=true -Pci --max-workers=4 --stacktrace"
  only:
    - merge_requests
    - branches
  except:
    - master

deploy:
  stage: deploy
  dependencies:
    - build
  script:
    - "gradle deployMC -PmavenPassword=$password -PmavenUser=$username $GRADLE_OPTS -PgenTR=true -PgenEMF=true -PgenTagging=true -Pci --max-workers=4"
  only:
    - dev
  except:
    - master

checkMLCs:
  stage: check
  needs: ["build"]
  dependencies:
    - build
  script:
    - "gradle checkArtifacts"
  artifacts:
    name: mlcreports
    when: always
    paths:
      - "**/target/reports/"
    expire_in: 1 week
  allow_failure: true
  except:
    - master

sonar:
  stage: check
  needs: ["build"]
  dependencies:
    - build
  script:
    - "gradle sonarMC $GRADLE_OPTS $SONAR_OPTS -Pci"
  allow_failure: true
  only:
    - dev
  except:
    - master

trigger-automata:
  stage: trigger_languages
  allow_failure: true
  trigger:
    project: monticore/languages/automaton
    branch: master
  only:
    - dev

trigger-cd4a-dev:
  stage: trigger_languages
  trigger:
    project: monticore/cd4analysis/cd4analysis
    branch: develop
  only:
    - dev

trigger-sd-dev:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sd-language
    branch: dev
  only:
    - dev

trigger-fd-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/feature-diagram
    branch: develop
  only:
    - dev

trigger-guidsl-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/gui-dsl
    branch: dev
  only:
    - dev

trigger-json-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/json
    branch: develop
  only:
    - dev

trigger-ma-dev:
  stage: trigger_languages
  trigger:
    project: monticore/montiarc/core
    branch: develop
  only:
    - dev

trigger-ocl-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/OCL
    branch: develop
  only:
    - dev

trigger-montifun-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/montifun
    branch: dev
  only:
    - dev

trigger-siunits-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/siunits
    branch: dev
  only:
    - dev

trigger-sc-dev:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sc-language
    branch: dev
  only:
    - dev

trigger-xml-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/xml
    branch: develop
  only:
    - dev

trigger-od-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/od
    branch: dev
  only:
    - dev

trigger-umlp-dev:
  stage: trigger_languages
  trigger:
    project: monticore/umlp
    branch: dev
    strategy: depend
  only:
    - dev

trigger-ucd-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/ucd
    branch: dev
  only:
    - dev

trigger-cd4a-master:
  stage: trigger_languages
  trigger:
    project: monticore/cd4analysis/cd4analysis
    branch: master
    strategy: depend
  only:
    - master

trigger-sd-master:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sd-language
    branch: master
  only:
    - master

trigger-fd-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/feature-diagram
    branch: master
  only:
    - master

trigger-guidsl-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/gui-dsl
    branch: master
  only:
    - master

trigger-json-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/json
    branch: master
  only:
    - master

trigger-ma-master:
  stage: trigger_languages
  trigger:
    project: monticore/montiarc/core
    branch: master
  only:
    - master

trigger-ocl-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/OCL
    branch: master
  only:
    - master

trigger-montifun-main:
  stage: trigger_languages
  trigger:
    project: monticore/languages/montifun
    branch: main
  only:
    - master

trigger-siunits-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/siunits
    branch: master
  only:
    - master

trigger-sc-master:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sc-language
    branch: master
  only:
    - master

trigger-xml-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/xml
    branch: master
  only:
    - master

trigger-od-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/od
    branch: master
  only:
    - master

# A lite version of the MontiVerse to detect the results of potential changes before they are merged
trigger-montiverse-ci:
  stage: test
  trigger:
    project: monticore/montiverseci
  variables:
    MONTICORE_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    FULL_MC: "false" # Do not run the experiments in the MontiVerse pipeline
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event' && ($CI_MERGE_REQUEST_EVENT_TYPE == 'detached' || $CI_MERGE_REQUEST_EVENT_TYPE == 'merged_result')
    
pages:
  stage: report
  dependencies: []
  image: python:alpine
  before_script:
    - apk add gcc musl-dev python3-dev
    - pip install cython
    - pip install mkdocs
    - pip install mkdocs-material
  script:
    - sh docs/scripts/preprocessing.sh
    - mkdocs build
    - mv site public
  artifacts:
    paths:
      - public
  only:
    - schedules

# Mirrors this repository's `dev` and `master` branches to GitHub.
#
# The mirror will always be at either HEAD or HEAD+1 (depending on whether cleanup is necessary).
# For more information, visit: https://git.rwth-aachen.de/se/infrastructure/github-mirror-tools (Available internally only)
githubmirror:
  # We need a JDK 17+ image for this job since the link checker requires Java 17.
  image: eclipse-temurin:17-jdk-alpine
  stage: mirror
  variables:
    # The repository is edited during this job. To make sure that no changes persist, we instruct GitLab to always
    # create a fresh clone of the repository instead of caching it and attempting to remove any changes.
    #
    # See https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: clone
  dependencies: []
  before_script:
    - 'apk --no-cache add curl git openssh-client'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SE_CIBUILD_SSH_PRIV_KEY")
    - echo "$SE_CIBUILD_SSH_PRIV_KEY" | tr -d '\r' | ssh-add -
    - git config --global user.email "noreply-ci@se-rwth.de"
    - git config --global user.name "MontiCore Mirroring Bot"
    - git checkout "$CI_COMMIT_REF_NAME" # GitLab checks out a commit in detached HEAD mode by default, but we want to commit to the branch and push.
    - mkdir -p ~/.ssh
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - 'curl --location --header "PRIVATE-TOKEN: $secibuildinfstrtoken" "https://git.rwth-aachen.de/api/v4/projects/se%2Finfrastructure%2Fgithub-mirror-tools/repository/files/mirror.sh/raw" --output mirror.sh'
    - sh mirror.sh
    - rm mirror.sh
    - 'curl --location --header "PRIVATE-TOKEN: $secibuildinfstrtoken" "https://git.rwth-aachen.de/api/v4/projects/se%2Finfrastructure%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkCheckerCLI.jar?job=build" --output MDLinkChecker.jar'
    - 'java -jar MDLinkChecker.jar -t "$secibuildtoken" -r . -p -c -i'
    - 'rm MDLinkChecker.jar'
    - git add --all
    # We'll simply ignore failures during commit because there is a chance that no files were changed. In this case the
    # remote will be on the same commit as the upstream repository.
    - (git commit -m "[Mirror] Replace all internal links and references") || true
    - git remote add github git@github.com:MontiCore/monticore.git
    - git push github $CI_COMMIT_BRANCH --force
  only:
    - dev
    - master
