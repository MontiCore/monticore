# (c) https://github.com/MontiCore/monticore
image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:6.8.2-jdk11

#include:
#  - template: Code-Quality.gitlab-ci.yml
#
variables:
  MC_MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2"
  GRADLE_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2"
  MC_MAVEN_CLI_OPTS: "--settings settings.xml --batch-mode -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
  SONAR_OPTS: "-Dsonar.login=$sonarUser -Dsonar.password=$sonarPassword"


before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

#cache:
#  paths:
#    - .m2/
#    - .gradle/wrapper
#  key: ${CI_COMMIT_REF_SLUG} # Cache per branch

stages:
  - build
  - test
  - deploy
  - trigger_languages
  - sonar
  - report
  - check
  - mirror

build:
  stage: build
  script:
    - "cd monticore-generator && gradle build $GRADLE_OPTS -Pci -i"
    - "cd .. && gradle buildMC $GRADLE_OPTS -Pci"
  tags:
    - gradle
  artifacts:
    paths:
      - ".gradle"
      - "*/target"
      - "*/.gradle"
    expire_in: 1 week
  only:
    - merge_requests
    - branches
  except:
    - master
      

test_01experiments:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/01.experiments build $GRADLE_OPTS -Pci"
  only:
    - merge_requests
    - branches
  except:
    - master

test_02experiments:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/02.experiments build $GRADLE_OPTS -Pci"
  only:
    - merge_requests
    - branches
  except:
    - master

test_it:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/it build $GRADLE_OPTS -Pci"
  only:
    - merge_requests
    - branches
  except:
    - master

test_it_emf:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/it build -PbuildProfile=emf $GRADLE_OPTS -Pci"
  only:
    - merge_requests
    - branches
  except:
    - master

test_grammar_it:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/monticore-grammar-it build $GRADLE_OPTS -Pci"
  only:
    - merge_requests
    - branches
  except:
    - master

test_montitrans:
  stage: test
  dependencies:
    - build
  script:
    - "gradle -p monticore-test/montitrans build $GRADLE_OPTS -Pci"
  only:
    - merge_requests
    - branches
  except:
    - master

deploy:
  stage: deploy
  dependencies:
    - build
  script:
    - "gradle deployMC -PmavenPassword=$password -PmavenUser=$username $GRADLE_OPTS -Pci"
  only:
    - dev
  except:
    - master

checkMLCs:
  stage: check
  needs: ["build"]
  dependencies:
    - build
  script:
    - "gradle checkArtifacts"
  artifacts:
    when: always
    paths:
      - "*/target/**/generated-sources/**/reports/"
    expire_in: 1 week
  allow_failure: true

sonar:
  stage: check
  needs: ["build"]
  dependencies:
    - build
  script:
    - "gradle sonarMC $GRADLE_OPTS $SONAR_OPTS -Pci"
  allow_failure: true
  only:
    - dev
  except:
    - master

trigger-automata:
  stage: trigger_languages
  allow_failure: true
  trigger:
    project: monticore/languages/automaton
    branch: master
  only:
    - dev

trigger-cd4a-dev:
  stage: trigger_languages
  trigger:
    project: monticore/cd4analysis/cd4analysis
    branch: develop
    strategy: depend
  only:
    - dev

trigger-sd-dev:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sd-language
    branch: dev
  only:
    - dev

trigger-fd-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/feature-diagram
    branch: develop
  only:
    - dev

trigger-guidsl-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/gui-dsl
    branch: master
  only:
    - dev

trigger-json-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/json
    branch: develop
  only:
    - dev

trigger-ma-dev:
  stage: trigger_languages
  trigger:
    project: monticore/montiarc/core
    branch: develop
    strategy: depend
  only:
    - dev

trigger-ocl-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/OCL
    branch: develop
  only:
    - dev

trigger-siunits-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/siunits
    branch: dev
  only:
    - dev

trigger-sc-dev:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sc-language
    branch: dev
  only:
    - dev

trigger-xml-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/xml
    branch: develop
  only:
    - dev

trigger-od-dev:
  stage: trigger_languages
  trigger:
    project: monticore/languages/od
    branch: dev
  only:
    - dev

trigger-umlp-dev:
  stage: trigger_languages
  trigger:
    project: monticore/umlp
    branch: dev
  only:
    - dev


trigger-cd4a-master:
  stage: trigger_languages
  trigger:
    project: monticore/cd4analysis/cd4analysis
    branch: master
    strategy: depend
  only:
    - master

trigger-sd-master:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sd-language
    branch: master
  only:
    - master

trigger-fd-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/feature-diagram
    branch: master
  only:
    - master

trigger-guidsl-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/gui-dsl
    branch: master
  only:
    - master

trigger-json-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/json
    branch: master
  only:
    - master

trigger-ma-master:
  stage: trigger_languages
  trigger:
    project: monticore/montiarc/core
    branch: master
  only:
    - master

trigger-ocl-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/OCL
    branch: master
  only:
    - master

trigger-siunits-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/siunits
    branch: master
  only:
    - master

trigger-sc-master:
  stage: trigger_languages
  trigger:
    project: monticore/statechart/sc-language
    branch: master
  only:
    - master

trigger-xml-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/xml
    branch: master
  only:
    - master

trigger-od-master:
  stage: trigger_languages
  trigger:
    project: monticore/languages/od
    branch: master
  only:
    - master

pages:
  stage: report
  dependencies: []
  image: python:alpine
  before_script:
    - apk add gcc musl-dev python3-dev
    - pip install cython
    - pip install mkdocs
    - pip install mkdocs-material
  script:
    - sh docs/scripts/preprocessing.sh
    - mkdocs build
    - mv site public
  artifacts:
    paths:
      - public
  only:
    - schedules

# Checks whether all links in the markdown files of this repo are reachable
checkMDLinks:
  stage: check
  needs: []
  allow_failure: true
  script:
# Download the current version of the MDLinkCheckerCLI tool
    - "curl --location --header \"PRIVATE-TOKEN: $secibuildtoken\" \"https://git.rwth-aachen.de/api/v4/projects/monticore%2Fauxiliary-development-tools%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkCheckerCLI.jar?job=build\" --output MDLinkCheckerCLI.jar"
    - "url=https://git.rwth-aachen.de/monticore/monticore/-/tree/dev"
# Call the tool with the url of the repo containing the files to check
    - "linkCheckRes=$(java -jar MDLinkCheckerCLI.jar -url $url -t $secibuildtoken)"
    - "echo \"$linkCheckRes\""
# If the cehck detected an error, exit to make this job produce an error
    - "if [[ $linkCheckRes == *\"ERROR\"* ]]; then exit 1; fi"
  only:
    - dev

# Mirrors this repository's `dev` and `master` branches to GitHub.
#
# The mirror will always be at either HEAD or HEAD+1 (depending on whether cleanup is necessary).
# For more information, visit: https://git.rwth-aachen.de/monticore/auxiliary-development-tools/github-mirror-tools (Available internally only)
githubmirror:
  stage: mirror
  variables:
    # The repository is edited during this job. To make sure that no changes persist, we instruct GitLab to always
    # create a fresh clone of the repository instead of caching it and attempting to remove any changes.
    #
    # See https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-strategy
    GIT_STRATEGY: clone
  dependencies:
    - checkMDLinks
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SE_CIBUILD_SSH_PRIV_KEY")
    - echo "$SE_CIBUILD_SSH_PRIV_KEY" | tr -d '\r' | ssh-add -
    - git config --global user.email "noreply-ci@se-rwth.de"
    - git config --global user.name "MontiCore Mirroring Bot"
    - git checkout "$CI_COMMIT_REF_NAME" # GitLab checks out a commit in detached HEAD mode by default, but we want to commit to the branch and push.
    - mkdir -p ~/.ssh
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  script:
    - "curl --location --header \"PRIVATE-TOKEN: $secibuildtoken\" \"https://git.rwth-aachen.de/api/v4/projects/monticore%2Fauxiliary-development-tools%2Fmdlinkchecker/jobs/artifacts/master/raw/target/libs/MDLinkChangerCLI.jar?job=build\" --output MDLinkChangerCLI.jar"
    - "curl --location --header \"PRIVATE-TOKEN: $secibuildtoken\" \"https://git.rwth-aachen.de/api/v4/projects/monticore%2Fauxiliary-development-tools%2Fgithub-mirror-tools/repository/files/mirror.sh/raw\" --output mirror.sh"
    - sh mirror.sh
    - rm MDLinkChangerCLI.jar
    - rm mirror.sh
    - git add --all
    # We'll simply ignore failures during commit because there is a chance that no files were changed. In this case the
    # remote will be on the same commit as the upstream repository.
    - (git commit -m "[Mirror] Replace all internal links and references") || true
    - git remote add github git@github.com:MontiCore/monticore.git
    - git push github $CI_COMMIT_BRANCH --force
  only:
    - opendev
    - master
