/* (c) https://github.com/MontiCore/monticore */
import de.monticore.MCTask

plugins{
  id "monticore"  //Monticore Plugin
  id "jacoco"
}

description = 'MontiCore Grammars Main Integration Test'
sourceCompatibility = '11'

ext.grammarDir = 'src/main/grammars'

configurations {grammar}

dependencies {
  implementation project(':monticore-runtime')
  implementation project(':monticore-grammar')
  implementation "de.se_rwth.commons:se-commons-utilities:$se_commons_version"
  testImplementation group:'junit', name:'junit', version: junit_version
  grammar (project(path: ':monticore-grammar')){
    capabilities {
      requireCapability("de.monticore:monticore-grammar-grammars")
    }
  }
}

buildDir = file("$projectDir/target")
ext.outDir = "$buildDir/generated-sources/monticore/sourcecode"
sourceSets.main.java.srcDirs += [ outDir ]

// one task per file
fileTree(grammarDir).matching { include '**/*.mc4'}.each {
  def g = it
  task  "generate${it.getName().substring(0,it.getName().lastIndexOf('.'))}" (type: MCTask) {
    grammar = file g
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    def uptoDate = incCheck(grammarIncludingPackage)
    outputs.upToDateWhen { uptoDate }
  }
}

compileJava {
  dependsOn project.collect { it.tasks.withType(MCTask) }
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.deprecation false
  options.warnings = false
}

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the 'test' task
  reportOn tasks.withType(Test)
}