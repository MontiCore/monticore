import de.monticore.MCTask

/* (c) https://github.com/MontiCore/monticore */
description = 'Experiments: tagging'

def grammarOutDir = "$buildDir/generated-sources/monticore/sourcecode"


dependencies {
  implementation project(path: ':monticore-grammar', configuration: 'tagging')
}

task generate (type: MCTask) {
  grammar = file "$projectDir/$grammarDir/Automata.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("Automata.mc4")
  outputs.upToDateWhen { uptoDate }
}

task generateTagDefinition (type: MCTask, dependsOn: generate) {
  grammar = file "$grammarOutDir/AutomataTagDefinition.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("AutomataTagDefinition.mc4")
  outputs.upToDateWhen { uptoDate }
  genTag = true // generate tagging related infrastructure, such as the Taggers
}
task generateTagSchema (type: MCTask, dependsOn: generate) {
  grammar = file "$grammarOutDir/AutomataTagSchema.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("AutomataTagSchema.mc4")
  outputs.upToDateWhen { uptoDate }
}

// ############

task generateFQN (type: MCTask) {
  grammar = file "$projectDir/$grammarDir/de/monticore/fqn/FQNAutomata.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/fqn/FQNAutomata.mc4")
  outputs.upToDateWhen { uptoDate }
}
task generateFQNTagDefinition (type: MCTask, dependsOn: generateFQN) {
  grammar = file "$grammarOutDir/de/monticore/fqn/FQNAutomataTagDefinition.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/fqn/FQNAutomataTagDefinition.mc4")
  outputs.upToDateWhen { uptoDate }
  genTag = true
}
task generateFQNTagSchema (type: MCTask, dependsOn: generateFQN) {
  grammar = file "$grammarOutDir/de/monticore/fqn/FQNAutomataTagSchema.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/fqn/FQNAutomataTagSchema.mc4")
  outputs.upToDateWhen { uptoDate }
}

// Note: This revision of tagging does not come with automatic support for tagging of super-grammars
// Here, we manually add this support using the FQNEnhancedAutomataHC mc4 grammar
task generateEnhancedFQN (type: MCTask, dependsOn: generateFQN) {
  grammar = file "$projectDir/$grammarDir/de/monticore/fqn/FQNEnhancedAutomata.mc4"
  modelPath("$projectDir/$grammarDir")
  modelPath("$projectDir/target/generated-sources/monticore/sourcecode") // provide the model path for Automata-Tag-Grammars
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/fqn/FQNEnhancedAutomata.mc4")
  outputs.upToDateWhen { uptoDate }
}
task generateEnhancedFQNTagDefinition (type: MCTask, dependsOn: generateEnhancedFQN) {
  grammar = file "$grammarOutDir/de/monticore/fqn/FQNEnhancedAutomataTagDefinition.mc4"
  modelPath("$projectDir/$grammarDir")
  modelPath("$grammarOutDir") // provide the model path for Automata-Tag-Grammars
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/fqn/FQNEnhancedAutomataTagDefinition.mc4")
  outputs.upToDateWhen { uptoDate }
  genTag = true
}
task generateEnhancedFQNTagSchema (type: MCTask, dependsOn: generateEnhancedFQN) {
  grammar = file "$grammarOutDir/de/monticore/fqn/FQNEnhancedAutomataTagSchema.mc4"
  modelPath("$projectDir/$grammarDir")
  modelPath("$grammarOutDir") // provide the model path for Automata-Tag-Grammars
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/fqn/FQNEnhancedAutomataTagSchema.mc4")
  outputs.upToDateWhen { uptoDate }
}

//
task generateCDBasis4Tags (type: MCTask) {
  grammar = file "$projectDir/$grammarDir/de/monticore/tagtest/CDBasis4Tags.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/tagtest/CDBasis4Tags.mc4")
  outputs.upToDateWhen { uptoDate }
}

task generateCDBasis4TagsTagDefinition (type: MCTask, dependsOn: generateCDBasis4Tags) {
  grammar = file "$grammarOutDir/de/monticore/tagtest/CDBasis4TagsTagDefinition.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/tagtest/CDBasis4TagsTagDefinition.mc4")
  outputs.upToDateWhen { uptoDate }
  genTag = true // generate tagging related infrastructure, such as the Taggers
}
task generateCDBasis4TagsTagSchema (type: MCTask, dependsOn: generateCDBasis4Tags) {
  grammar = file "$grammarOutDir/de/monticore/tagtest/CDBasis4TagsTagSchema.mc4"
  outputDir = file outDir
  def uptoDate = incCheck("de/monticore/tagtest/CDBasis4TagsTagSchema.mc4")
  outputs.upToDateWhen { uptoDate }
}

// (Legacy) Setup for MCTasks
sourceSets {
  main.java.srcDirs += [ outDir ]
}
compileJava {
  dependsOn project.collect { it.tasks.withType(MCTask) }
}

