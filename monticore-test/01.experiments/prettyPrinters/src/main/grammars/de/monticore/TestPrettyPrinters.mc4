/* (c) https://github.com/MontiCore/monticore */

package de.monticore;

grammar TestPrettyPrinters extends de.monticore.literals.MCCommonLiterals  {

  A = "A";
  B = "B";
  C = "C";
  D = "D";

  CPName = "term" Name otherUsage:Name s:Name;
  CPNameOpt = "term" Name otherUsage:Name? s:Name?;

  CPA = "term" A otherUsage:A s:A;
  CPAOpt = "term" A? otherUsage:A? s:A?;
  CPAList = "term" A* otherUsage:A* s:A*;

  CPIteratorDef = A "term" A    Name "term" Name;
  CPIteratorOpt = A "term" A?   Name "term" Name?;
  CPIteratorStar = A "term" A*  Name "term" Name*;
  CPIteratorPlus = A "term" A+  Name "term" Name+;
  CPIteratorAlt = A "term" (A | Name);
  CPIteratorAltU = A:A "term" (A:A | Name); // Also test with capital usage-name
  CPIteratorAltName = Name "term" (Name | A);

  CPNonSepS = "term" ( Name || ".")*;
  CPNonSepP = "term" ( Name || ".")+;

  // Allows As and Bs in any order => The empty ";" will be never printed
  CPAltBlock = "term" ( ("{" (A | B)* "}") | ";") ;

  CPAltBlockReversed = "term" (";" | ("{" (A | B)* "}")) ;

  // Do not allow empty { } => Instead print the semicolon terminal
  CPAltBlockOrEmpty = "term" ( ("{" (A | B)+ "}") | ";") ;

  // ConstantGroups
  CPCGSingle = ["cg1"] ;
  CPCGSingleU1 = [u:"cg1"] ;
  CPCGSingleU2 = u:["cg1"] ;
  CPCGSingleU3 = cg:[ a:"cg1" | a:"cg2"] ; // Note: Only the first constant is generated for the parser
  CPCGSingleU4 = cg:["a" | a:"cg1" | a:"cg2"] ; // Note: Only the first constant is generated

  CPCGMulti1 = cg:["cg1" | "cg2"] ;
  CPCGMulti2 = cg:[u:"cg1" | v:"cg2"] ;
  CPCGMulti3 = cg:[a:"cg1" | a:"cg2" |  b: "b"] ;
  CPCGMulti4 = (op:["*"] | op:["/"]);   // special constand handling

  MultiCGPlus = (["a"]| ["b"] | ["c"])+ D?;
  MultiCGStar = (["a"] | ["b"] | ["c"])* D?;
  SingleCGPlus = (cg:["a"| "b" | "c"])+ D?;
  SingleCGStar = (cg:["a"| "b" | "c"])* D?;

  MultiCGPlusAlt = (["a"]| ["b"] | ["c"])+ D? | "empty";
  MultiCGStarSkipAlt = (["a"]| ["b"] | ["c"])* D? | "empty";

  // ConstantGroups in a repeated block => does not repeat endless
  CPCGRepBlock = (("<<" ["cg1"] ">>" ) | ("<<" ["cg2"] ">>" ))* ;

  // Duplicate NonTerminal usagenames
  DuplicateUsageName =  Name  ("=" value:Name |"=" value:String)? ;
  DuplicateUsageName2 = a:Name a:Name;
  DuplicateUsageName3 = a:Name (a:Name)*;

  // Duplicate Token-NonTerminal usagenames
  token MyToken = "MYTOKEN";
  DuplicateTokenUsageName =  MyToken  ("=" value:MyToken |"+=" value:MyToken)? ;
  DuplicateTokenUsageName2 = a:MyToken a:MyToken;
  DuplicateTokenUsageName3 = a:MyToken (a:MyToken)*;

  // Duplicate Terminal with usagenames
  DuplicateTermUsageName2 = a:"a" a:"a";
  DuplicateTermUsageName3 = a:"a" (a:"a")*;

  CPAstList = (A | B | C)*;         // Unsupported
  astrule CPAstList = a:A max=1;    // Unsupported

  CPAltFailure = (["cg"] | A)*;     // Unsupported
  CPAltF2 = ("t" | A)*;             // Unsupported

  CPCGSup = complete:["(c)"];
  CPCGUnsupName = ending:[".dot"|".jpg"];   // Unsupported due to constants name

  CPListInDList = B (B A*)*;
  CPListInPList = B (B+ A*)*;

   // OverwriteWithASTRule
   Test = "test" Name;
   
    ORA =  Name "<" Test ">";
     astrule ORA =
         de.monticore.testprettyprinters._ast.ASTTest*
         name:String*;
   
   
    ORB =  foo:Name "<" Test ">";
     astrule ORB =
         Test*
         foo:String*;
   
    ORC = foo:Name "<" bla:Test ">";
     astrule ORC =
         bla:Test*
         foo:String*;
   
    ORD =  Name* "<" Test* ">";
     astrule ORD =
         de.monticore.testprettyprinters._ast.ASTTest
         name:String;
   
    E =  foo:Name* "<" Test* ">";
     astrule E =
         Test
         foo:String;
   
    F = foo:Name* "<" bla:Test* ">";
     astrule F =
         bla:Test
         foo:String;
   
    G = foo:Name "<" bla:Test ">";
     astrule G =
         bla:de.monticore.testprettyprinters._ast.ASTTest*
         foo:String*;
   
    H =  Name* "<" Test ">";
     astrule H =
         de.monticore.testprettyprinters._ast.ASTTest?
         name:String?;
   
    I =  Name* "<" Test ">";
     astrule I =
         Test?
         name:String;
   
    J =  Name* "<" Test* ">";
     astrule J =
         Test max = 1
         name:String max = 1;
   
    K =  Name* "<" Test+ ">";
     astrule K =
         de.monticore.testprettyprinters._ast.ASTTest?
         name:String;
   
    L =  Name* "<" Test+ ">";
     astrule L =
         Test?
         name:String;
   
    M =  foo:Name* "<" Test* ">";
     astrule M =
         de.monticore.testprettyprinters._ast.ASTTest
         foo:String;

    // Special-cases: Nonterminals ending in "S" or "s"
    NTEndingWithCS = "a"; // capital end S
    NTEndingWithls = "a"; // lowercase end s

    NTCaseS1 = NTEndingWithCS;
    NTCaseS2 = NTEndingWithCS?;
    NTCaseS3 = NTEndingWithCS*;
    NTCaseS4 = NTEndingWithCS+;

    NTCaseSU1 = US:NTEndingWithCS;
    NTCaseSU2 = US:NTEndingWithCS?;
    NTCaseSU3 = US:NTEndingWithCS*;
    NTCaseSU4 = US:NTEndingWithCS+;

    NTLCases1 = NTEndingWithls;
    NTLCases2 = NTEndingWithls?;
    NTLCases3 = NTEndingWithls*;
    NTLCases4 = NTEndingWithls+;

    NTLCasesU1 = us:NTEndingWithls;
    NTLCasesU2 = us:NTEndingWithls?;
    NTLCasesU3 = us:NTEndingWithls*;
    NTLCasesU4 = us:NTEndingWithls+;

    // Example from the JavaScript DSL (with a bunch of placeholders)

	Do = "Do";
	Statement = "Statement";
	While = "While";
	For = "For";
	ExpressionSequence = "ExpressionSequence";
	EOS = ";";
	Var = "Var";
	VariableDeclaration = "VariableDeclaration";
	VariableDeclarations = VariableDeclaration ("," VariableDeclaration)*;
	Expression = "Expression";
    In = "In";

    IterationStatement   =
    		Do Statement While "(" ExpressionSequence ")" EOS |
    		While "(" ExpressionSequence ")" Statement |
    		For "(" ExpressionSequence? ";" ExpressionSequence? ";" ExpressionSequence? ")" Statement |
    		For "(" Var VariableDeclarations? ";" ExpressionSequence? ";" ExpressionSequence? ")" Statement |
    		For "(" Expression In ExpressionSequence ")" Statement |
    		For "(" Var VariableDeclaration In ExpressionSequence ")" Statement
    	;

    OptEnd = A? "->" B (";" | C);

    SDCall = [key("trigger")]? ["static"]? A B?;

    LiteralProd = Literal;
    SignedLiteralProd = SignedLiteral;

    // The following productions should all result in no space between the "::" tokens

    NoSpacePredA = "foo" ":" ":" {noSpace()}? "bar";

    NoSpacePredB = "foo" ":" ":" "bar" {noSpace(-2)}?;

    NoSpacePredC = {noSpace(3)}? "foo" ":" ":" "bar";

    NoSpacePredD = {noSpace(3)}? "foo" ":" ":" "bar" | "abc" Name;

    NoSpacePredE = "yes"? ("abc" Name |  {noSpace(3)}? "foo" ":" ":" "bar");

    NoSpacePredF = {noSpace(3, 4)}? "foo" ":" ":" ":" "bar";

    NoSpacePredG = {noSpace(3)}? "foo" ":" ":" ":" "bar" {noSpace(-2)}?;

    // Example from the 2017 reference manual

    NoWhiteSpaceA2017 = Name "." NoWSLast2 Name NoWSLast2 ;

    NoWSLast2 = {noSpace()}? ;

    NoSpaceAlts = {noSpace(2)}? (negative:["-"] | positive:["+"]) Name;
    NoSpaceAltsO = NoSpaceAlts Name;
    NoSpaceAlts2 = {noSpace(2)}? (negative:["-"] | "a" "+") Name;

    NoSpaceAltsOpt = {noSpace(2)}? (negative:["-"])? Name (positive:["+"]);
    NoSpaceAltsOverflow = {noSpace(3)}? (negative:["-"] | "a" "b") Name "." Name;

    // The following expressions will be ignored due to simplicity
    NoSpaceExpOrT = {noSpace(3) || true}? "foo" ":" ":" "bar";
    NoSpaceExpOrF = {noSpace(3) || false}? "foo" ":" ":" "bar";
    NoSpaceExpAndT = {noSpace(3) && true}? "foo" ":" ":" "bar";
    NoSpaceExpAndF = {noSpace(3) && false}? "foo" ":" ":" "bar";

    NoSpaceSpecialB = {noSpace(2,3)}? "{" "a" "}";
    NoSpaceSpecialS = {noSpace(2,3)}? ";" "a" ";";


    UsedTerminalD = un:"a"  "b";
    UsedTerminalQ = un:"a"? "b";
    UsedTerminalP = un:"a"+ "b";
    UsedTerminalS = un:"a"* "b";

    UsedTerminalBD = (un:"a")  "b";
    UsedTerminalBQ = (un:"a")? "b";
    UsedTerminalBP = (un:"a")+ "b";
    UsedTerminalBS = (un:"a")* "b";

    UsedTerminalB2D = (un:"a" "c")  "b";
    UsedTerminalB2Q = (un:"a" "c")? "b";
    UsedTerminalB2P = (un:"a" "c")+ "b";
    UsedTerminalB2S = (un:"a" "c")* "b";

    UsedTerminalAlt = A | parenthesis:"(" (A || ",")* ")";

    MethodDeclarationStub = "MCReturnType" Name "FormalParameters" (dim:"[" "]")*  ";";

    TokenString = "a" String;
    TokenName = "a" Name;
    TokenChar = "a" Char;
    TokenDigits = "a" Digits;

    GuessSpace1 = A "a" A;
    GuessSpace2 = A "*" A;

    interface InterfaceI;
    InterfaceImpl1 implements InterfaceI = "InterfaceImpl1";
    InterfaceImpl2 implements InterfaceI = "InterfaceImpl2";
    // Prepare for SuperTestPrettyPrinters
    ProductionFromTestPrettyPrintersA = "a";
    ProductionFromTestPrettyPrintersB = "b";

    ToBeReplacedKeyword = "ToBeReplacedKeyword";
    replacekeyword "ToBeReplacedKeyword": "ActuallyReplacedKeyword";
    ProdUsingToBeReplacedKeywordA = ToBeReplacedKeyword;
    ProdUsingToBeReplacedKeywordB = "other" "ToBeReplacedKeyword";
    ProdUsingToBeReplacedKeywordC = "othercg" ["ToBeReplacedKeyword"];

    ToBeAddedKeyword = "ToBeAddedKeyword";
    replacekeyword "ToBeAddedKeyword": "ToBeAddedKeyword" , "ActuallyAddedKeyword";
    ProdUsingToBeAddedKeywordA = ToBeAddedKeyword;
    ProdUsingToBeAddedKeywordB = "other" "ToBeAddedKeyword";
    ProdUsingToBeAddedKeywordC = "othercg" ["ToBeAddedKeyword"];

    // Note: This production may have to be removed due to a CoCo
    ProdNamedTerminal = term:"prodNamedTerminal";
    replacekeyword "prodNamedTerminal": "newprodNamedTerminal", "prodNamedTerminal";

    interface TypeInterface;
    interface TypeInterface2;
    TestType implements TypeInterface = "TestType" TypeInterface2?;
    UsingTestType = "abc" TypeInterface;
    TestType2 implements TypeInterface2 = "TT2";
}
