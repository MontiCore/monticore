/* (c) https://github.com/MontiCore/monticore */

import de.monticore.generating.GeneratorEngine;
import de.monticore.generating.GeneratorSetup;
import de.se_rwth.commons.logging.Log;
import de.se_rwth.commons.logging.LogStub;
import hierautomata._ast.ASTStateMachine;
import hierautomata._parser.HierAutomataParser;
import org.antlr.v4.runtime.RecognitionException;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import java.io.IOException;
import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

@Ignore
public class GlexTest {
    
  // setup the language infrastructure
  static ASTStateMachine ast;

  private static final String REGEXP = "[\r\n]";
  private static final String REPLACE = "#";

  @BeforeClass
  public static void init() throws IOException {
    // LogStub.initPlusLog();  // for manual testing purpose only
    HierAutomataParser parser = new HierAutomataParser() ;
    String model = "src/test/resources/example/HierarchyPingPong.aut";
    Optional<ASTStateMachine> optStateMachine = parser.parse(model);

    if(parser.hasErrors() || !optStateMachine.isPresent()) {
    	throw new IOException();
    }
    ast = optStateMachine.get();
    if(ast == null) {
    	throw new IOException();
    }
  }
  
  @Before
  public void before() {
    LogStub.init();
    Log.enableFailQuick(false);
  }
  
  @Before
  public void setUp() throws RecognitionException {
    Log.getFindings().clear();
  }
  

  // --------------------------------------------------------------------
  @Test
  public void testSimple() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // Empty Dummy
    StringBuilder res = ge.generate("tpl3/TestGlexOnStateMachine1.ftl", ast);

    // Stringvergleich: --------------------
    assertEquals("[]", Log.getFindings().toString());
    assertEquals("DummyTemplate with no real content#", res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }


  // --------------------------------------------------------------------
  @Test
  public void testTracing() {
    GeneratorSetup s = new GeneratorSetup();

    s.setCommentStart("AAA ");
    s.setCommentEnd(" EEE");
    s.setTracing(true);
    GeneratorEngine ge = new GeneratorEngine(s);

    // Empty Dummy + tracing
    StringBuilder res = ge.generate("tpl3/TestGlexOnStateMachine1.ftl", ast);

    assertEquals("[]", Log.getFindings().toString());
    assertEquals("AAA  generated by template tpl3/TestGlexOnStateMachine1.ftl EEE#DummyTemplate with no real content#",
            res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }


  // --------------------------------------------------------------------
  @Test
  public void testVariables() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // two normal variables
    StringBuilder res = ge.generate("tpl3/TestVariables.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    assertEquals("[]", Log.getFindings().toString());
    assertEquals("#V1:17##V2:35#", res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }

  // --------------------------------------------------------------------
  @Test
  public void testSignature() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // ast pointer in Variable a1 abspeichern, aber keine global var
    StringBuilder res = ge.generateNoA("tpl3/TestSignature.ftl", ast);
	
    // System.out.println("****RES::\n" + res + "\n****--------");
    assertEquals("[]", Log.getFindings().toString());
    assertEquals("#  A:OK:PingPong#  B:OK#", res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }


  // --------------------------------------------------------------------
  @Test
  public void testVariables2() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // override same variable
    StringBuilder res = ge.generate("tpl3/TestVariables2.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    assertEquals("[0xA0122 Global Value 'v1' has already been set.\n Old value: 16\n New value: 38]", Log.getFindings().toString());
    assertEquals("#V1:16##V2:38##V3:Aha#",
    				res.toString().replaceAll(REGEXP, REPLACE));
  }


  // --------------------------------------------------------------------
  @Test
  public void testVariables3() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // override same variable
    StringBuilder res = ge.generate("tpl3/TestVariables3.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    assertEquals("[]", Log.getFindings().toString());
    assertEquals("  A:OK##  B:OK#  C:OK#",  res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }


  // --------------------------------------------------------------------
  @Test
  public void testVariables4() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // override same variable
    StringBuilder res = ge.generate("tpl3/TestVariables4.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    assertEquals("[]", Log.getFindings().toString());
    assertEquals("##A:16#B:38#C:555#",
                                res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }


  // --------------------------------------------------------------------
  @Test
  public void testVariables5() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // test change var
    StringBuilder res = ge.generate("tpl3/TestVariables5.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    // System.out.println("++++LOG::\n" + Log.getFindings() + "\n++++--------");
    assertEquals("[0xA0124 Global Value 'v2' has not been defined.]", 
    			Log.getFindings().toString());
    assertEquals("##A:22## B:OK#", res.toString().replaceAll(REGEXP, REPLACE));
  }


  // --------------------------------------------------------------------
  @Test
  public void testVariables6() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // test required
    StringBuilder res = ge.generate("tpl3/TestVariables6.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    // System.out.println("++++LOG::\n" + Log.getFindings() + "\n++++--------");
    assertEquals("[0xA0126 Missing required value \"vU\", 0xA0126 Missing required value \"vV\"]", Log.getFindings().toString());
  }


  // --------------------------------------------------------------------
  @Test
  public void testVariables7() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    GeneratorEngine ge = new GeneratorEngine(s);

    // test addToGlobalVar
    StringBuilder res = ge.generate("tpl3/TestVariables7.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    // System.out.println("++++LOG::\n" + Log.getFindings() + "\n++++--------");
    assertEquals("[]", Log.getFindings().toString());
    assertEquals("###A:16,17,###B:23,25,27,###C:34,36,#",
    	                                   res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }

  // --------------------------------------------------------------------
  @Test
  public void testShowForRefMan() {
    GeneratorSetup s = new GeneratorSetup();
    s.setTracing(false);
    s.getGlex().defineGlobalVar("v3",67);
    GeneratorEngine ge = new GeneratorEngine(s);

    // test addToGlobalVar
    StringBuilder res = ge.generate("tpl3/TestShow.ftl", ast);

    // System.out.println("****RES::\n" + res + "\n****--------");
    // System.out.println("++++LOG::\n" + Log.getFindings() + "\n++++--------");
    assertEquals("[]", Log.getFindings().toString());
    assertEquals("###  Var v1 is 35##  Ok.#  ###### 16, 18, 19, 17,#",
    				res.toString().replaceAll(REGEXP, REPLACE));
    assertTrue(Log.getFindings().isEmpty());
  }

}
