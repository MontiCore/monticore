/* (c) https://github.com/MontiCore/monticore */

// This grammar is used to construct various
grammar ParseErrors extends de.monticore.MCBasics {


  MyKeyword = "keyword"; // results in "keyword" being a keyword
  MyNoKeyword = "notakeyword"; // Define notakeyword explicitly not as a keyword
  nokeyword "notakeyword";

  // Test against the name here
  TestKeyword = Name "testkeyword";

  // Parsing should succeed
  TestKeywordPlus = Name&;

  // Test unexpected keyword behind a reference
  TestNP = TestKeyword;

  // Two productions which expect a key (but not a keyword)
  TestKeyConstant1 = key("keyconst1") Name;
  TestKeyConstant2 = key("keyconst2") Name;

  // key with alt
  TestKeyConstantAlt1 = TestKeyConstant1 | TestKeyConstant2;
  // key with direct alt
  TestKeyConstantAlt2 = key("keyconst1") Name | key("keyconst2") Name;

  // Test nokeyword
  TestNoKeyW1 = "notakeyword" "1";
  TestNoKeyW2 = "notakeyword" "2";

  // nokeyword with indirect alts
  TestNoKeyWAlt1 = TestNoKeyW1 | TestNoKeyW2;
  // nokeyword with direct alts
  TestNoKeyWAlt2 = "notakeyword" "1" | "notakeyword" "2";

  // Test a comma separated list
  TestSepList = "seplist" (Name || ",")+;

  Dot = ".";

  Comp = key("component") Name "{" IComp* "}" ;
  CompPlus = key("component") Name "{" IComp+ "}" ;

  IComp = "ICompKW" | key("ICompKey");

  // This one is tricky, because the last alternative is an alternative with a semantic predicate
  UnknownAlts = "UnknownAltsT" | key("UnknownAltsKey") | {false}? Name ;

  NoSpaceTest = {noSpace(2)}? "@" Name;

  // Example productions based on CDs
  CDLike = "cd" CDLikeElement*;

  interface CDLikeElement;

  CDLikeTerm implements CDLikeElement = Modifier "class" Name "{" "}";
  CDLikeKey  implements CDLikeElement = key("package") Name "{" "}";
  CDLikeAlt  implements CDLikeElement = Modifier CDLikeAltElem Name ";";

  // Various alternatives via interfaces
  interface CDLikeAltElem;
  CDAssocTypeAssoc implements CDLikeAltElem = "association";
  CDAssocTypeComp  implements CDLikeAltElem = "composition";

  // Modifier may be empty
  Modifier = Stereo? (["public"] | [public:"+"] | ["private"] )*;

  Stereo = "<<" Name ">>";

  // the 'Unrelated' MUST not be contained within CDLike Elements
  SomeUnrelatedProd = Modifier "Unrelated";

   P = "ax" Name | "bx" Name;

}
