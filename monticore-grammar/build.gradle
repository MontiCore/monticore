///* (c) https://github.com/MontiCore/monticore */

buildscript {
  if (findProperty('bootstrap')) {
    // fake a different group for Gradle to prevent it from including the build in it self
    group = "de.mc"
  }
}

plugins {
  id "java-library"
  id "com.github.johnrengelman.shadow" version "7.1.2"
  id "de.monticore.generator" version "$version"
  id "jacoco"
}

description = 'MontiCore: Grammar'
if (!hasProperty('bootstrap')) {
  group = "de.monticore"
} else {
  group = "de.monticore.bs"
}

def grammarOutDir = "$buildDir/generated-sources/monticore/sourcecode"
def testGrammarOutDir = "$buildDir/generated-test-sources/monticore/sourcecode"
def trafoOutDir = "$buildDir/generated-sources/monticore/trafo"
def taggingOutDir = "$buildDir/generated-sources/monticore/tagging"


sourceSets {
  // main.java.srcDirs is already being added
  test.java.srcDirs += [testGrammarOutDir]

  grammars {
    java.srcDirs = []
    resources {
      srcDirs([grammarDir, grammarOutDir])
      include "**/*.mc4"
      include "**/*.mlc"
    }
  }
  trafo {
    java.srcDirs = [trafoOutDir]
  }
  tagging {
    java.srcDirs = [taggingOutDir]
  }
}

dependencies {
  api project(':monticore-runtime')
  implementation "com.google.guava:guava:$guava_version"
  implementation "org.apache.commons:commons-lang3:$commons_lang3_version"
  testImplementation "junit:junit:$junit_version"
  trafoCompileOnly project(path)
  taggingCompileOnly project(path)
  // use compileOnly as the tagging- and trafo-artifact are only an extension to the default artifact
}


generateMCGrammars {
  outputDir = file grammarOutDir
  debug = false
  if (findProperty("ci") != null) {
    script = "de/monticore/monticore_noreports.groovy"
  }
}

// This task can be used to run the MC generator on only a single grammar
// Use this task to test changes to the MC generator without the need to rebuild all grammars
// This task is NOT required in a standard project using MC
tasks.register("generateSingleMCGrammarForDev", MCGenTask) {
  outputDir = file grammarOutDir
  grammar.setFrom(file "src/main/grammars/de/monticore/grammar/Grammar_WithConcepts.mc4")
  debug = false
  group = 'mc'
}

// Note: In the future we will introduce options for TR/Tag output to the tool
import de.monticore.gradle.gen.MCGenTask;

if (("true").equals(getProperty('genTR'))) {
  tasks.register("generateTRGrammars", MCGenTask) {
    // Make sure we use the output of the generate task
    // (this ensures, that the inFputs are not evaluated too early, resulting in this task being skipped)
    grammar.setFrom(tasks.named("generateMCGrammars", MCGenTask.class).get().getTROutput()
            .matching {
              exclude(['**/de/monticore/tf/*', '**/de/monticore/grammar/*'])
            })
    outputDir = file trafoOutDir
    genDST = true
    modelPath.from(file grammarOutDir) // requires the directory structure
    if (findProperty("ci") != null) {
      script = "de/monticore/monticore_noreports.groovy"
    }
    group = 'mc'
  }
  processGrammarsResources.dependsOn(generateTRGrammars)
  compileTrafoJava.dependsOn(generateTRGrammars)
}

if (("true").equals(getProperty('genTagging'))) {
  tasks.register("generateTagDefGrammars", MCGenTask.class) {
    // Make sure we use the output of the generate task
    // (this ensures, that the inputs are not evaluated too early, resulting in this task being skipped)
    grammar.setFrom(tasks.named("generateMCGrammars", MCGenTask.class).get().getTagDefOutput().matching {
      exclude(['**/de/monticore/tagging/*', '**/Grammar_WithConcepts*'])
    })
    outputDir = file taggingOutDir
    genTag = true
    modelPath.from(file grammarOutDir)
    dependsOn("generateMCGrammars")
    if (findProperty("ci") != null) {
      script = "de/monticore/monticore_noreports.groovy"
    }
  }
  compileTaggingJava.dependsOn(generateTagDefGrammars)
  processGrammarsResources.dependsOn(generateTagDefGrammars)
  tasks.register("generateTagSchemaGrammars", MCGenTask.class) {
    // Make sure we use the output of the generate task
    // (this ensures, that the inputs are not evaluated too early, resulting in this task being skipped)
    grammar.setFrom(tasks.named("generateMCGrammars", MCGenTask.class).get().getTagSchemaOutput().matching {
      exclude(['**/de/monticore/tagging/*', '**/de/monticore/grammar/*'])
    })
    outputDir = file taggingOutDir
    modelPath.from(file grammarOutDir)
    dependsOn("generateMCGrammars")
    if (findProperty("ci") != null) {
      script = "de/monticore/monticore_noreports.groovy"
    }
  }
  compileTaggingJava.dependsOn(generateTagSchemaGrammars)
  processGrammarsResources.dependsOn(generateTagSchemaGrammars)
}

// grammar dependencies without generated TR grammars
def grammarDependencies = ext {
  // no dependencies
  MCBasics = []
  MCLiteralsBasis = []
  Completeness = []
  MCStatementsBasis = []
  Antlr = []

  // one dependency
  MCSynchronizedStatements = ["MCCommonStatements"]
  CommonExpressions = ["ExpressionsBasis"]
  BitExpressions = ["ExpressionsBasis"]
  OptionalOperators = ["CommonExpressions"]
  MCBasicTypes = ["MCBasics"]
  MCFullGenericTypes = ["MCSimpleGenericTypes"]
  ODRuleGeneration = ["MCFullGenericTypes"]
  BasicSymbols = ["MCBasics"]
  CompSymbols = ["BasicSymbols"]
  AssignmentExpressions = ["ExpressionsBasis"]
  UMLModifier = ["UMLStereotype"]
  MCArrayTypes = ["MCBasicTypes"]
  MCSimpleGenericTypes = ["MCCollectionTypes"]
  MCCommonStatements = ["MCVarDeclarationStatements"]
  MCCollectionTypes = ["MCBasicTypes"]
  StreamExpressions = ["CommonExpressions"]
  MCExceptionStatements = ["MCCommonStatements"]
  MCFunctionTypes = ["MCBasicTypes"]
  MCStructuralTypes = ["MCBasicTypes"]
  OOSymbols = ["BasicSymbols"]
  TFCommons = ["TFBasisExts"]
  MCJavaLiterals = ["MCCommonLiterals"]
  UMLStereotype = ["MCCommonLiterals"]
  MCArrayStatements = ["MCVarDeclarationStatements"]
  RegularExpressions = ["MCCommonLiterals"]
  TupleExpressions = ["ExpressionsBasis"]

  // two dependencies
  Cardinality = ["MCBasics", "MCCommonLiterals"]
  ExpressionsBasis = ["MCBasics", "MCLiteralsBasis"]
  Grammar = ["MCCommonLiterals", "MCSimpleGenericTypes"]
  MCReturnStatements = ["MCStatementsBasis", "ExpressionsBasis"]
  MCCommonLiterals = ["MCBasics", "MCLiteralsBasis"]
  MCLowLevelStatements = ["MCStatementsBasis", "MCBasics"]
  MCAssertStatements = ["MCStatementsBasis", "ExpressionsBasis"]
  RegExType = ["RegularExpressions", "MCBasicTypes"]
  UglyExpressions = ["CommonExpressions", "MCBasicTypes"]

  // three dependencies
  LambdaExpressions = ["BasicSymbols", "MCBasicTypes", "ExpressionsBasis"]
  OCLExpressions = ["BasicSymbols", "ExpressionsBasis", "MCBasicTypes"]
  SetExpressions = ["BasicSymbols", "ExpressionsBasis", "MCBasicTypes"]
  TFBasisExts = ["JavaLight", "MCSimpleGenericTypes", "MCCommonLiterals"]
  Tags = ["MCBasics", "BasicSymbols", "MCCommonLiterals"]
  TagSchema = ["MCBasics", "MCBasicTypes", "MCCommonLiterals"]

  // four dependencies
  JavaClassExpressions = ["CommonExpressions", "MCFullGenericTypes", "MCVarDeclarationStatements", "UglyExpressions"]
  MCCommon = ["Cardinality", "Completeness", "UMLModifier", "UMLStereotype"]
  ODRules = ["TFBasisExts", "MCCommonLiterals", "MCJavaLiterals", "UMLStereotype"]
  MCVarDeclarationStatements = ["MCStatementsBasis", "MCBasicTypes", "ExpressionsBasis", "OOSymbols"]

  // five dependencies
  JavaLight = ["AssignmentExpressions", "JavaClassExpressions", "MCCommonStatements", "MCArrayStatements", "MCReturnStatements"]

  // six dependencies
  MCFullJavaStatements = ["MCAssertStatements", "MCExceptionStatements", "MCLowLevelStatements", "MCReturnStatements", "MCSynchronizedStatements", "MCArrayStatements"]

  // nine dependencies
  Grammar_WithConcepts = ["Grammar", "MCCommonStatements", "MCReturnStatements", "MCExceptionStatements", "JavaClassExpressions", "JavaLight", "Antlr", "CommonExpressions", "BitExpressions"]
}

task generateTest {}

tasks.register("generateTestGrammars", MCGenTask.class) {
  grammar.setFrom(file "src/test/grammars")
  grammar.from(file "src/main/examples")
  outputDir = file testGrammarOutDir
  hwcDir = file "$projectDir/src/main/java"
  hwcDir += file "$projectDir/src/test/java"

  modelPath("$projectDir/$grammarDir",
          "$projectDir/src/test/grammars",
          "$projectDir/src/main/examples")

  if (findProperty("ci") != null) {
    script = "de/monticore/monticore_noreports.groovy"
  }
}

compileTestJava.dependsOn(generateTestGrammars)
processGrammarsResources.dependsOn(generateMCGrammars)


/**
 * Integration with MLC language and tool
 */
task showArtifacts {}
task checkArtifacts {}
configurations { MLC }
dependencies {
  MLC(group: 'de.monticore.lang', name: 'mlc-gradle', version: "$version")
}
StringJoiner joiner = new StringJoiner(" ")
configurations.compileClasspath.resolve().each { joiner.add(it.toString()) }
joiner.add "$projectDir/target/symbols"
String mp = joiner.toString()

///////////// MLC tasks - Start ///////////////////////
// two tasks per MLC file
// each task needs to depend on all internally promoted MLCs
fileTree("src/main/grammars").matching { include '**/*.mlc' }.each {
  def f = it
  def mlcName = it.getName().substring(0, it.getName().lastIndexOf('.'))

  task "showArtifacts${mlcName}"(type: JavaExec) {
    classpath = configurations.MLC
    group = 'MLC'
    mainClass = 'de.monticore.mlc.MLCTool'
    args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-reports", "${buildDir}/reports", "-a", "-noFQ"
    dependsOn("generateMCGrammars")
    showArtifacts.dependsOn("showArtifacts${mlcName}")
  }

  task "checkArtifacts${mlcName}"(type: JavaExec) {
    classpath = configurations.MLC
    group = 'MLC'
    mainClass = 'de.monticore.mlc.MLCTool'
    args "-input", f, "-projectDir", projectDir, "-mp", mp, "-s", "-check", "-reports", "${buildDir}/reports"
    dependsOn("generateMCGrammars")
    checkArtifacts.dependsOn("checkArtifacts${mlcName}")
  }
}

///////////// dependencies between check artifacts tasks ///////////////////////

checkArtifactsAssignmentExpressions.dependsOn(checkArtifactsExpressionsBasis)

checkArtifactsBitExpressions.dependsOn(checkArtifactsExpressionsBasis)

checkArtifactsCommonExpressions.dependsOn(checkArtifactsExpressionsBasis)

checkArtifactsExpressionsBasis.dependsOn(checkArtifactsMCBasics)
checkArtifactsExpressionsBasis.dependsOn(checkArtifactsMCLiteralsBasis)
checkArtifactsExpressionsBasis.dependsOn(checkArtifactsBasicSymbols)

checkArtifactsJavaClassExpressions.dependsOn(checkArtifactsCommonExpressions)
checkArtifactsJavaClassExpressions.dependsOn(checkArtifactsMCFullGenericTypes)
checkArtifactsJavaClassExpressions.dependsOn(checkArtifactsUglyExpressions)
checkArtifactsJavaClassExpressions.dependsOn(checkArtifactsMCStatementsBasis)
checkArtifactsJavaClassExpressions.dependsOn(checkArtifactsMCVarDeclarationStatements)

checkArtifactsAntlr.dependsOn(checkArtifactsMCBasics)

checkArtifactsGrammar.dependsOn(checkArtifactsMCCommonLiterals)
checkArtifactsGrammar.dependsOn(checkArtifactsMCSimpleGenericTypes)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsGrammar)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsMCCommonStatements)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsMCReturnStatements)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsMCExceptionStatements)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsJavaClassExpressions)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsJavaLight)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsAntlr)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsCommonExpressions)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsBitExpressions)
checkArtifactsGrammar_WithConcepts.dependsOn(checkArtifactsUglyExpressions)

checkArtifactsMCCommonLiterals.dependsOn(checkArtifactsMCLiteralsBasis)
checkArtifactsMCCommonLiterals.dependsOn(checkArtifactsMCBasics)
checkArtifactsMCCommonLiterals.dependsOn(checkArtifactsBasicSymbols)

checkArtifactsMCLiteralsBasis.dependsOn(checkArtifactsMCBasics)

checkArtifactsMCJavaLiterals.dependsOn(checkArtifactsMCCommonLiterals)

checkArtifactsMCArrayStatements.dependsOn(checkArtifactsMCVarDeclarationStatements)
checkArtifactsMCAssertStatements.dependsOn(checkArtifactsMCStatementsBasis)
checkArtifactsMCAssertStatements.dependsOn(checkArtifactsExpressionsBasis)

checkArtifactsMCCommonStatements.dependsOn(checkArtifactsMCVarDeclarationStatements)

checkArtifactsMCExceptionStatements.dependsOn(checkArtifactsMCCommonStatements)

checkArtifactsMCFullJavaStatements.dependsOn(checkArtifactsMCAssertStatements)
checkArtifactsMCFullJavaStatements.dependsOn(checkArtifactsMCExceptionStatements)
checkArtifactsMCFullJavaStatements.dependsOn(checkArtifactsMCLowLevelStatements)
checkArtifactsMCFullJavaStatements.dependsOn(checkArtifactsMCReturnStatements)
checkArtifactsMCFullJavaStatements.dependsOn(checkArtifactsMCSynchronizedStatements)
checkArtifactsMCFullJavaStatements.dependsOn(checkArtifactsMCArrayStatements)

checkArtifactsMCLowLevelStatements.dependsOn(checkArtifactsMCStatementsBasis)

checkArtifactsMCReturnStatements.dependsOn(checkArtifactsMCStatementsBasis)
checkArtifactsMCReturnStatements.dependsOn(checkArtifactsExpressionsBasis)

checkArtifactsMCStatementsBasis.dependsOn(checkArtifactsMCBasics)

checkArtifactsMCSynchronizedStatements.dependsOn(checkArtifactsMCCommonStatements)

checkArtifactsMCVarDeclarationStatements.dependsOn(checkArtifactsMCStatementsBasis)
checkArtifactsMCVarDeclarationStatements.dependsOn(checkArtifactsMCBasicTypes)
checkArtifactsMCVarDeclarationStatements.dependsOn(checkArtifactsExpressionsBasis)
checkArtifactsMCVarDeclarationStatements.dependsOn(checkArtifactsOOSymbols)

checkArtifactsBasicSymbols.dependsOn(checkArtifactsMCBasics)

checkArtifactsOOSymbols.dependsOn(checkArtifactsBasicSymbols)

checkArtifactsODRuleGeneration.dependsOn(checkArtifactsMCFullGenericTypes)

checkArtifactsODRules.dependsOn(checkArtifactsMCFullGenericTypes)
checkArtifactsODRules.dependsOn(checkArtifactsTFBasisExts)
checkArtifactsODRules.dependsOn(checkArtifactsMCJavaLiterals)
checkArtifactsODRules.dependsOn(checkArtifactsUMLStereotype)
checkArtifactsODRules.dependsOn(checkArtifactsUglyExpressions)
checkArtifactsODRules.dependsOn(checkArtifactsExpressionsBasis)

checkArtifactsTFBasisExts.dependsOn(checkArtifactsMCSimpleGenericTypes)
checkArtifactsTFBasisExts.dependsOn(checkArtifactsMCCommonLiterals)
checkArtifactsTFBasisExts.dependsOn(checkArtifactsJavaLight)
checkArtifactsTFBasisExts.dependsOn(checkArtifactsUglyExpressions)

checkArtifactsTFCommons.dependsOn(checkArtifactsTFBasisExts)
checkArtifactsTFCommons.dependsOn(checkArtifactsUglyExpressions)

checkArtifactsMCArrayTypes.dependsOn(checkArtifactsMCBasicTypes)

checkArtifactsMCBasicTypes.dependsOn(checkArtifactsMCBasics)
checkArtifactsMCBasicTypes.dependsOn(checkArtifactsOOSymbols)

checkArtifactsMCCollectionTypes.dependsOn(checkArtifactsMCBasicTypes)

checkArtifactsMCFullGenericTypes.dependsOn(checkArtifactsMCSimpleGenericTypes)

checkArtifactsMCSimpleGenericTypes.dependsOn(checkArtifactsMCCollectionTypes)

checkArtifactsCardinality.dependsOn(checkArtifactsMCBasics)
checkArtifactsCardinality.dependsOn(checkArtifactsMCCommonLiterals)

checkArtifactsJavaLight.dependsOn(checkArtifactsAssignmentExpressions)
checkArtifactsJavaLight.dependsOn(checkArtifactsJavaClassExpressions)
checkArtifactsJavaLight.dependsOn(checkArtifactsMCCommonStatements)
checkArtifactsJavaLight.dependsOn(checkArtifactsMCArrayStatements)
checkArtifactsJavaLight.dependsOn(checkArtifactsMCReturnStatements)
checkArtifactsJavaLight.dependsOn(checkArtifactsUglyExpressions)

checkArtifactsMCCommon.dependsOn(checkArtifactsCardinality)
checkArtifactsMCCommon.dependsOn(checkArtifactsCompleteness)
checkArtifactsMCCommon.dependsOn(checkArtifactsUMLModifier)
checkArtifactsMCCommon.dependsOn(checkArtifactsUMLStereotype)

checkArtifactsUMLModifier.dependsOn(checkArtifactsUMLStereotype)

checkArtifactsUMLStereotype.dependsOn(checkArtifactsMCCommonLiterals)

checkArtifactsRegularExpressions.dependsOn(checkArtifactsMCCommonLiterals)

checkArtifactsRegExType.dependsOn(checkArtifactsRegularExpressions)
checkArtifactsRegExType.dependsOn(checkArtifactsMCBasicTypes)

checkArtifactsUglyExpressions.dependsOn(checkArtifactsCommonExpressions)
checkArtifactsUglyExpressions.dependsOn(checkArtifactsMCBasicTypes)

///////////// dependencies between show artifacts tasks ///////////////////////

showArtifactsAssignmentExpressions.dependsOn(showArtifactsExpressionsBasis)

showArtifactsBitExpressions.dependsOn(showArtifactsExpressionsBasis)

showArtifactsCommonExpressions.dependsOn(showArtifactsExpressionsBasis)

showArtifactsExpressionsBasis.dependsOn(showArtifactsMCBasics)
showArtifactsExpressionsBasis.dependsOn(showArtifactsMCLiteralsBasis)
showArtifactsExpressionsBasis.dependsOn(showArtifactsBasicSymbols)

showArtifactsJavaClassExpressions.dependsOn(showArtifactsCommonExpressions)
showArtifactsJavaClassExpressions.dependsOn(showArtifactsMCFullGenericTypes)
showArtifactsJavaClassExpressions.dependsOn(showArtifactsUglyExpressions)
showArtifactsJavaClassExpressions.dependsOn(showArtifactsMCStatementsBasis)
showArtifactsJavaClassExpressions.dependsOn(showArtifactsMCVarDeclarationStatements)

showArtifactsAntlr.dependsOn(showArtifactsMCBasics)

showArtifactsGrammar.dependsOn(showArtifactsMCCommonLiterals)
showArtifactsGrammar.dependsOn(showArtifactsMCSimpleGenericTypes)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsGrammar)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsMCCommonStatements)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsMCReturnStatements)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsMCExceptionStatements)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsJavaClassExpressions)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsJavaLight)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsAntlr)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsCommonExpressions)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsBitExpressions)
showArtifactsGrammar_WithConcepts.dependsOn(showArtifactsUglyExpressions)

showArtifactsMCCommonLiterals.dependsOn(showArtifactsMCLiteralsBasis)
showArtifactsMCCommonLiterals.dependsOn(showArtifactsMCBasics)
showArtifactsMCCommonLiterals.dependsOn(showArtifactsBasicSymbols)

showArtifactsMCLiteralsBasis.dependsOn(showArtifactsMCBasics)

showArtifactsMCJavaLiterals.dependsOn(showArtifactsMCCommonLiterals)

showArtifactsMCArrayStatements.dependsOn(showArtifactsMCVarDeclarationStatements)
showArtifactsMCAssertStatements.dependsOn(showArtifactsMCStatementsBasis)
showArtifactsMCAssertStatements.dependsOn(showArtifactsExpressionsBasis)

showArtifactsMCCommonStatements.dependsOn(showArtifactsMCVarDeclarationStatements)

showArtifactsMCExceptionStatements.dependsOn(showArtifactsMCCommonStatements)

showArtifactsMCFullJavaStatements.dependsOn(showArtifactsMCAssertStatements)
showArtifactsMCFullJavaStatements.dependsOn(showArtifactsMCExceptionStatements)
showArtifactsMCFullJavaStatements.dependsOn(showArtifactsMCLowLevelStatements)
showArtifactsMCFullJavaStatements.dependsOn(showArtifactsMCReturnStatements)
showArtifactsMCFullJavaStatements.dependsOn(showArtifactsMCSynchronizedStatements)
showArtifactsMCFullJavaStatements.dependsOn(showArtifactsMCArrayStatements)

showArtifactsMCLowLevelStatements.dependsOn(showArtifactsMCStatementsBasis)

showArtifactsMCReturnStatements.dependsOn(showArtifactsMCStatementsBasis)
showArtifactsMCReturnStatements.dependsOn(showArtifactsExpressionsBasis)

showArtifactsMCStatementsBasis.dependsOn(showArtifactsMCBasics)

showArtifactsMCSynchronizedStatements.dependsOn(showArtifactsMCCommonStatements)

showArtifactsMCVarDeclarationStatements.dependsOn(showArtifactsMCStatementsBasis)
showArtifactsMCVarDeclarationStatements.dependsOn(showArtifactsMCBasicTypes)
showArtifactsMCVarDeclarationStatements.dependsOn(showArtifactsExpressionsBasis)
showArtifactsMCVarDeclarationStatements.dependsOn(showArtifactsOOSymbols)

showArtifactsBasicSymbols.dependsOn(showArtifactsMCBasics)

showArtifactsOOSymbols.dependsOn(showArtifactsBasicSymbols)

showArtifactsODRuleGeneration.dependsOn(showArtifactsMCFullGenericTypes)

showArtifactsODRules.dependsOn(showArtifactsMCFullGenericTypes)
showArtifactsODRules.dependsOn(showArtifactsTFBasisExts)
showArtifactsODRules.dependsOn(showArtifactsMCJavaLiterals)
showArtifactsODRules.dependsOn(showArtifactsUMLStereotype)
showArtifactsODRules.dependsOn(showArtifactsUglyExpressions)
showArtifactsODRules.dependsOn(showArtifactsExpressionsBasis)

showArtifactsTFBasisExts.dependsOn(showArtifactsMCSimpleGenericTypes)
showArtifactsTFBasisExts.dependsOn(showArtifactsMCCommonLiterals)
showArtifactsTFBasisExts.dependsOn(showArtifactsJavaLight)
showArtifactsTFBasisExts.dependsOn(showArtifactsUglyExpressions)

showArtifactsTFCommons.dependsOn(showArtifactsTFBasisExts)
showArtifactsTFCommons.dependsOn(showArtifactsUglyExpressions)

showArtifactsMCArrayTypes.dependsOn(showArtifactsMCBasicTypes)

showArtifactsMCBasicTypes.dependsOn(showArtifactsMCBasics)
showArtifactsMCBasicTypes.dependsOn(showArtifactsOOSymbols)

showArtifactsMCCollectionTypes.dependsOn(showArtifactsMCBasicTypes)

showArtifactsMCFullGenericTypes.dependsOn(showArtifactsMCSimpleGenericTypes)

showArtifactsMCSimpleGenericTypes.dependsOn(showArtifactsMCCollectionTypes)

showArtifactsCardinality.dependsOn(showArtifactsMCBasics)
showArtifactsCardinality.dependsOn(showArtifactsMCCommonLiterals)

showArtifactsJavaLight.dependsOn(showArtifactsAssignmentExpressions)
showArtifactsJavaLight.dependsOn(showArtifactsJavaClassExpressions)
showArtifactsJavaLight.dependsOn(showArtifactsMCCommonStatements)
showArtifactsJavaLight.dependsOn(showArtifactsMCArrayStatements)
showArtifactsJavaLight.dependsOn(showArtifactsMCReturnStatements)
showArtifactsJavaLight.dependsOn(showArtifactsUglyExpressions)

showArtifactsMCCommon.dependsOn(showArtifactsCardinality)
showArtifactsMCCommon.dependsOn(showArtifactsCompleteness)
showArtifactsMCCommon.dependsOn(showArtifactsUMLModifier)
showArtifactsMCCommon.dependsOn(showArtifactsUMLStereotype)

showArtifactsUMLModifier.dependsOn(showArtifactsUMLStereotype)

showArtifactsUMLStereotype.dependsOn(showArtifactsMCCommonLiterals)

showArtifactsRegularExpressions.dependsOn(showArtifactsMCCommonLiterals)

showArtifactsRegExType.dependsOn(showArtifactsRegularExpressions)
showArtifactsRegExType.dependsOn(showArtifactsMCBasicTypes)

showArtifactsUglyExpressions.dependsOn(showArtifactsCommonExpressions)
showArtifactsUglyExpressions.dependsOn(showArtifactsMCBasicTypes)

///////////// MLC tasks - End ///////////////////////

java {
  registerFeature('grammars') {
    usingSourceSet(sourceSets.grammars)
  }
  registerFeature('tests') {
    usingSourceSet(sourceSets.test)
  }
}

shadowJar {
  from sourceSets.grammars.resources
}

shadowJar.dependsOn(generateMCGrammars)
shadowJar.dependsOn(generateTestGrammars)

jar.dependsOn(shadowJar)
jar.dependsOn(grammarsJar)

if (findProperty('ci') == null) {
  jar.dependsOn(shadowJar, testJar)
}

if (("true").equals(getProperty('genTR'))) {
  // Bundle and publish the generated TR artifacts separately as monticore-grammar-trafo
  tasks.register('trafoJar', Jar) {
    from sourceSets.trafo.output
    group 'build'
  }
  tasks.register('trafoSourcesJar', Jar) {
    from sourceSets.trafo.java
    group 'build'
  }
  publishing {
    publications {
      "trafo"(MavenPublication) {
        artifactId = project.name + "-trafo"
        artifact tasks.trafoJar { appendix 'trafo' }
        artifact tasks.trafoSourcesJar { appendix 'trafo'; classifier 'sources' }
      }
    }
  }
  // And expose the trafo jar artifact to other subprojects using a 'trafo' configuration
  configurations {
    trafo
  }
  artifacts {
    trafo(trafoJar)
  }
}
if (("true").equals(getProperty('genTagging'))) {
  // Bundle and publish the generated tagging artifacts separately as monticore-grammar-tagging
  tasks.register('taggingJar', Jar) {
    from sourceSets.tagging.output
    group 'build'
  }
  tasks.register('taggingSourcesJar', Jar) {
    from sourceSets.tagging.java
    group 'build'
  }
  publishing {
    publications {
      "tagging"(MavenPublication) {
        artifactId = project.name + "-tagging"
        artifact tasks.taggingJar { appendix 'tagging' }
        artifact tasks.taggingSourcesJar { appendix 'tagging'; classifier 'sources' }
      }
    }
  }
  configurations {
    tagging
  }
  artifacts {
    tagging(taggingJar)
  }
}
