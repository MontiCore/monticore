/* (c) https://github.com/MontiCore/monticore */
package de.monticore.tf.odrules._ast;

import de.monticore.types.mcsimplegenerictypes.MCSimpleGenericTypesMill;
import de.monticore.umlstereotype._ast.ASTStereotype;
import de.se_rwth.commons.Names;

import java.util.ArrayList;
import java.util.List;

public class ASTODObject extends ASTODObjectTOP {

  protected  ASTODObject (/* generated by template ast.ParametersDeclaration*/
                             // Parameters declaration
  )
  /* generated by template ast.EmptyMethodBody*/

  { // empty body
  }

  protected  ASTODObject (ASTStereotype stereotype,
                          String name,
                          de.monticore.types.mcbasictypes._ast.ASTMCType type,
                          List<ASTODAttribute> attributes,
                          List<ASTODInnerLink> innerLinks)
  {
    super();
    setStereotype(stereotype);
    setName(name);
    setType(type);
    setAttributesList(attributes);
    setInnerLinksList(innerLinks);
    //super(stereotype, name, type, attributes, innerLinks);
  }

  private String sName;
  private String sType;
  private String sQualifiedType;
  private ArrayList<ASTODLink> linkList;

  @Override
  public ASTODObject deepClone() {
    return (ASTODObject) super.deepClone();
  }
  

  public boolean hasStereotype(String name) {
    if (isPresentStereotype()) {
      return getStereotype().contains(name.intern());
    }
    return false;
  }

  public boolean hasStereotype(String name, String value) {
    if (isPresentStereotype()) {
      return getStereotype().contains(name.intern(), value.intern());
    }
    return false;
  }

  public String getStereotypeValue(String name) {
    if (isPresentStereotype()) {
      String sv = getStereotype().getValue(name.intern());
      if (sv != null) {
        return sv;
      }
    }
    return "";
  }

  public String printName() {
    // lazy calculation from ast
    if (sName == null) {
      if (name.isPresent()) {
        sName = name.get().intern();
      }
      else {
        // use type-name instead
        sName = Names.getSimpleName(printType());
        // remove generic-part
        if (sName.contains("<")) {
          sName = sName.substring(0, sName.indexOf("<"));
        }
        sName = sName.toLowerCase().intern();
      }
    }
    return sName;
  }

  public String printType() {
    if (sType == null) {
      if (type.isPresent()) {
        // lazy calculation from ast
        sType = MCSimpleGenericTypesMill.prettyPrint(type.get(), false).intern();
        if(sType.endsWith("<>")) {
          sType = sType.substring(0, sType.length()-2);
        }
      }
      else {
        sType = "";
      }
    }
    return sType;
  }

  public String printQualifiedType() {
    if (sQualifiedType == null) {
      if (type != null) {
        sQualifiedType = printType();
      }
    }
    return sQualifiedType;
  }

  /**
   * Returns all ODObjects, including inner links
   * and deeper hierarchies.
   * @return a list of all ASTODObjects
   */
  public List<ASTODObject> getAllODObjects() {
    List<ASTODObject> allObjects = new ArrayList<>();

    for (ASTODInnerLink link : getInnerLinksList()) {
      ASTODObject innerObject = (ASTODObject) link.getODObject();
      allObjects.add(innerObject);
      allObjects.addAll(innerObject.getAllODObjects());
    }

    return allObjects;
  }
}
