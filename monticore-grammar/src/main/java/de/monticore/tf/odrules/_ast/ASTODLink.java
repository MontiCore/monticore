/* (c) https://github.com/MontiCore/monticore */
package de.monticore.tf.odrules._ast;


import de.monticore.umlstereotype._ast.ASTStereotype;

import java.util.NoSuchElementException;

public class ASTODLink extends ASTODLinkTOP {

  protected  ASTODLink (/* generated by template ast.ParametersDeclaration*/
                           // Parameters declaration
  )
  /* generated by template ast.EmptyMethodBody*/

  { // empty body
  }

  protected  ASTODLink (ASTStereotype stereotype,
                        String name,
                        java.util.List<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> leftReferenceNames,
                        String leftRole,
                        String rightRole,
                        ASTCardinality attributeCardinality,
                        java.util.List<de.monticore.types.mcbasictypes._ast.ASTMCQualifiedName> rightReferenceNames,
                        boolean link)  {
    /* generated by template data.ConstructorAttributesSetter*/
    super();
    setStereotype(stereotype);
    setName(name);
    setLeftReferenceNameList(leftReferenceNames);
    setLeftRole(leftRole);
    setRightRole(rightRole);
    setAttributeCardinality(attributeCardinality);
    setRightReferenceNameList(rightReferenceNames);
/*    super( stereotype
        ,
        name
        ,
        leftReferenceNames
        ,
        leftRole
        ,
        rightRole
        ,
         rightReferenceNames
        ,
     link
 
    );*/
  }

  private String sLeftRole;
  private String sRightRole;

  @Override
  public boolean isLink() {
    // ODLinks in ODRules are always compositions
    return link;
  }

  public boolean hasStereotype(String name) {
    if (isPresentStereotype()) {
      return getStereotype().contains(name.intern());
    }
    return false;
  }

  public boolean hasStereotype(String name, String value) {
    if (isPresentStereotype()) {
      return getStereotype().contains(name.intern(), value.intern());
    }
    return false;
  }

  public String getStereotypeValue(String name) {
    if (isPresentStereotype()) {
      try {
        return getStereotype().getValue(name.intern());
      } catch (NoSuchElementException e) {
        return "";
      }
    }
    return "";
  }

  public String printName() {
    if (isPresentName()) {
      return getName();
    }
    return "";
  }


  /**
   * Returns the left role of the according association of this link. Default is
   * the name of the association if leftRole is not set. In case the association
   * is unnamed the type-name of the left reference (in lower-case) is used
   * instead.
   *
   * @return left role as String
   */
  public String printLeftRole() {
    if (sLeftRole == null) {
      if (isPresentLeftRole()) {
        sLeftRole = getLeftRole();
      }
      else if (isPresentName()) {
        sLeftRole = getName();
      }
      else {
          sLeftRole = "";
      }
    }
    return sLeftRole;
  }

  public String printRightRole() {
    if (sRightRole == null) {
      if (isPresentRightRole()) {
        sRightRole = getRightRole();
      }
      else if (isPresentName()) {
        sRightRole = getName();
      }
      else {

          sRightRole = "";
      }
    }
    return sRightRole;
  }



    public boolean isAttributeIterated() {
      return getAttributeCardinality().isMany() || getAttributeCardinality().isOneToMany();
    }

    public boolean isAttributeOptional() {
      return getAttributeCardinality().isOptional();
    }


}
