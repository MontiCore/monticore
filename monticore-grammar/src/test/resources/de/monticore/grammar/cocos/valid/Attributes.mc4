/* (c) https://github.com/MontiCore/monticore */

package  de.monticore.grammar.cocos.valid;

grammar Attributes  {

  A;

  abstract B;

  interface scope C;


  D = a:A b:B c:C a:A b:B c:C;

  E extends B implements C = "e";

  /** A ASTAutomaton represents a finite automaton
      @attribute Name Name of the automaton
      @attribute States List of states
      @attribute Transitions List of transitions
  */
  Automaton =
    "automaton" Name "{" (State | Transition)* "}" ;

  /** A ASTState represents a state of a finite automaton
      @attribute Name Name of state
      @attribute Initial True if state is initial state
      @attribute Final True if state is a final state
      @attribute States List of sub states
      @attribute Transitions List of transitions
  */
  symbol State =
    "state" Name

    (("<<" ["initial"] ">>" ) | ("<<" ["final"] ">>" ))*

    ( ("{" (State | Transition)* "}") | ";") ;

  symbolrule State =
    isFinal: boolean;

  /** A ASTTransition represents a transition
      @attribute From Name of the state from which the transitions starts
      @attribute Input Activation signal for this transition
      @attribute To Name of the state to which the transitions goes
  */
  Transition =
    from:Name "-" input:Name ">" to:Name ";" ;

  token Name =
        ( 'a'..'z' | 'A'..'Z' | '_' | '$' )( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' )*;

  Keywords = "step" step:Name;

  Bla = token("::") Name;

  Bla2 = key("unused") Name;

  splittoken ":::";

  nokeyword "automaton";

}
