/* (c) https://github.com/MontiCore/monticore */

package de.monticore;

/** The grammar describes the MontiCore grammar in its own format 
*/
component grammar TestGrammar extends de.monticore.common.TestLiterals {

  /** Used for embedding actions */
  external Action;

  /** Used as Expression in syntactic predicates */
  external ExpressionPredicate;

  /** Used for embedding concepts */
  external MCConcept;

  /** A MontiCore grammar describes a context free grammar in an own format
  @attribute name The name of this grammar
  @attribute supergrammar Supergrammars of this grammar
  @attribute GrammarOption Options for this grammar
  @attribute LexProd Lexical productions
  @attribute ClassProd Class productions
  @attribute EnumProd Enumeration productions
  @attribute ExternalProd External productions
  @attribute InterfaceProd List of all interface productions of this grammar
  @attribute AbstractProd List of all abstract productions of this grammar
  @attribute ASTRule List of all ast rules of this grammar
  @attribute AssociationBlock List of all associations blocks of this grammars
  @attribute Concepts List of additional concepts
  */
  MCGrammar =
    ("package" Package:(Name& || ".")+ ";")?
  	(ImportStatements:MCImportStatement)*

    (["component"])? "grammar" Name
      ("extends" supergrammar:(GrammarReference || ",")+ )?
      "{"
         (
           GrammarOption
         |
           LexProd
         |
           ClassProd
         |
           EnumProd
         |
           ExternalProd
         |
           InterfaceProd
         |
           AbstractProd
         |
           ASTRule
         |
           Concept
         )*
      "}" ;
 
  MCImportStatement = "import" ImportList:Name& ( "." ImportList:Name&)* ("." Star:["*"])? ";" ;

  // One OptionBlock only
  astrule MCGrammar =
    ASTGrammarOption max=1 ;


  /** A GrammarReference references another grammar
  @attribute name Qualified name of the other grammar
  */
  GrammarReference =
    (Name& || ".")+  ;

  // ------------------------------------------------------------------------------
  // Options

  /** Options for a grammar
  @attribute followOption Expression that shall be realized by lexer rules
  @attribute genericOption Expression that shall be realized by lexer rules
  */
  GrammarOption=
    "options" "{"
      (
        FollowOption
      |
        AntlrOption
      )*
    "}" ;

  /** A FollowOption specifies an additional follow set for a production
  @attribute prodName name of the production
  @attribute alt the follow set
  */
  FollowOption =
    "follow" prodName:Name Alt ";";


  /** A antlr option is an option that is passed on Anltr
  itself
  @attribute name name of the option
  @attribute value optional value
  */
  AntlrOption =
    Name  ("=" value:Name |"=" value:String)? ;

  // ------------------------------------------------------------------------------
  // Productions

  /** Productions form the syntactical structure of the grammar
  */
  interface Prod;

  astrule Prod =
    Name ;


  /** ParserProduction are handled by the parser
  */
  interface ParserProd extends Prod;

 // ------------------------------------------------------------------------------
 // Productions

  /** A LexProd is formed by the keyword ident in the beginning followed by an option
  slash indicating that this LexProd is protected. The following name, options and
  symbol are handed to antlr directly
  @attribute Protected If true, this identifier is protected and call only be called by
                       other identifiers
  @attribute Name Name of this identifier, only uppercase letters should be used
  @attribute LexOption Options for lexer rule
  @attribute InitAction Init actions for lexer rule
  @attribute Alts List of alts for this lexer rule
  @attribute Variable Variable used for mapping
                      (if type != null) or standard type (if type == null)
  @attribute Type Type of the lexer tokens
  @attribute Block Block used if other than standard mapping shall be used
  */
  LexProd implements Prod =
    (["fragment"] | ["comment"]  )*
    ("token") Name
    (
      (
        LexOption ("{" InitAction:Action "}")? // Statements
      |
        "{" InitAction:Action "}"
      )?
      "=" Alts:(LexAlt || "|")+

      (":" ("{" EndAction:Action  "}")? (Variable:Name&
        ("->" Type:( Name& || ".")+ (":" "{" Block:Action "}" )? )? )? // Statements
      )?
    )
    ";";


  /** An Enumeration-Production
  @attribute name Name of the production
  @attribute constant List of all constants
  */
  EnumProd implements Prod =
    "enum" Name "=" Constant ("|" Constant)* ";";


  /** A ExternalProduction represents a hole in the grammar where another production
  can be plugged in
  @attribute name Name of the hole
  @attribute genericType External type used for this hole rule
  */
  ExternalProd implements Prod =
    "external" Name SymbolDefinition? GenericType? ";";


  /** An ASTInterfaceRule represents an explicit definition for an interface production
  and may overwrite the standard generated rule which is mentioned in the productions
  @attribute external True if this interface is programmed manually
  @attribute name Name of the production
  @attribute Parameter List of production parameters
  @attribute superInterfaceRule Super interfaces
  @attribute aSTSuperInterface Super interfaces abstract syntax only
  @attribute overrideStandard True if interfaces is relevant
  @attribute interfaces Ordered list of productions that are used for parsing
  */
  InterfaceProd implements ParserProd =
    "interface" Name SymbolDefinition?
    (
      "extends" superInterfaceRule:(RuleReference || "," )+
    |
      "astextends" aSTSuperInterface:(GenericType || ",")+
    )*
    ";";


  /** An ASTInterfaceRule represents an explicit definition for an interface rule and
  overwrites the standard generated rule which is mentioned in the rules
  @attribute name Name of the production
  @attribute Parameter List of production parameters
  @attribute superInterfaceRule Super interfaces
  @attribute aSTSuperInterface Super interfaces abstract syntax only
  @attribute superRule Super productions
  @attribute aSTSuperClass Super productions abstract syntax only
  @attribute overrideStandard True if interfaces is relevant
  @attribute interfaces Ordered list of productions that are used for parsing
  */
  AbstractProd implements Prod =
    "abstract" Name SymbolDefinition?
    (
      "extends" superRule:(RuleReference || ",")+
    |
      "implements" superInterfaceRule:(RuleReference || ",")+
    |
      "astextends" aSTSuperClass:(GenericType || ",")+
    |
      "astimplements" aSTSuperInterface:(GenericType || ",")+
    )*  ";";


  /** A rule represents a rule (production) in a context free grammar.
  @attribute name Name of the rule
  @attribute type Type this rule contributes to
  @attribute superrule Rule reference to a super rule
  @attribute superInterfaceRule Rule reference to a super interface rule
  @attribute aSTSuperClass Rule reference to a super rule used for abstract syntax only
  @attribute aSTSuperInterfacerule Rule reference to a super rule used for abstract
                                   syntax only
  @attribute superInterfaceRule Rule reference to a super interface rule
  @attribute ruleParameters List of formal Parameters handed to this rule
  @attribute action Action executed priot to the rule body
  @attribute alts List of alternatives representing the body of the rule
  */
  ClassProd implements ParserProd =
    Name SymbolDefinition?
    (
       "extends" superRule:(RuleReference || ",")+
    |
       "implements" superInterfaceRule:(RuleReference || ",")+
    |
       "astextends" aSTSuperClass:(GenericType || ",")+
    |
       "astimplements" aSTSuperInterface:(GenericType || ",")+
    )*

    ("{" Action "}")?    // Statements
    ("=" alts:(Alt || "|")+ )? ";";

  astrule ClassProd =
    method public String toString() { return name; } ;


  /** Cardinality
  @attribute True if unbounded cardinality (min and max are meaningless)
  @attribute min Minimal cardinality
  @attribute max Maximal cardinality
  */
  Card =
   (
     Unbounded:["*"]
   |
     "min" "=" Min:Num_Int
     ("max" "=" ( Max:Num_Int | Max:"*"))?
   |
     "max" "=" ( Max:Num_Int | Max:"*")
   );



  /** A RuleReference refers to another production
  */
  RuleReference  =
    SemanticpredicateOrAction? Name ;

  astrule RuleReference =
    method public String getTypeName() {
      return getName();
    }
    method public boolean isExternal() {
        return false;
    };

  // ------------------------------------------------------------------------------
  // Production body


  /** An alternative represents an alternative in a rule or block and contains
  (Rule)Components
  @attribute Components List of the rule components of this alternative
  */
  Alt =
    Components:RuleComponent* ;


  /** RuleComponents are parts of the alternatives
  */
  interface RuleComponent;

  /** A NonTerminalSeparator is a shortcut for the description of list structures
  @attribute variableName Name for a variable binding (Note: Only one attribute of
                          VariableName and UsuageName may have a value)
  @attribute usageName Name for attribute
  @attribute name The name of the nonterminal
  @attribute separator The terminal as list separator
  @attribute plusKeywords True indicates that all keywords are allowed as well
  @attribute iteration Iteration of nonterminal
  */
  NonTerminalSeparator implements RuleComponent =
    (variableName:Name& "=" | usageName:Name&  ":")?
    "(" Name (plusKeywords:["&"])? "||" separator:String ")" Iteration:["*"|"+"];



  /** A block is something used in rules which is surrounded by ()
  @attribute Option options for this look like a non-greedy behavior
  @attribute Alts List of alternatives
  @attribute Iteration Iteration of this block
  */
  Block  implements RuleComponent =
    "("
    (
      (
        Option  ( "init" "{" InitAction:Action "}" )? // Statements
      |
        "init" "{" InitAction:Action "}"  // Statements
      )
      ":"
    )?
    Alts:(Alt || "|")+ ")"
    (Iteration:["?"|"*"|"+"])?;


  /** Option values handed to Antlr
  @attribute optionValue Value handes to Antlr
  */
  Option =
    "options" "{" OptionValue+ "}";


  /** Key/Value pairs handed to Antlr
  @attribute key Key
  @attribute value Value
  */
  OptionValue =
    key:Name "=" value:Name ";" ;


  /** Reference to another rule
  @attribute variableName Name for a variable binding (Note: Only one attribute of
                          VariableName and UsuageName may have a value)
  @attribute usageName Name for attribute
  @attribute plusKeywords True indicates that all keywords are allowed as well
  @attribute iteration Iteration of nonterminal
  */
  NonTerminal implements RuleComponent =
    (variableName:Name&? "=" | usageName:Name&?  ":")?
    Name ("@" referencedSymbol:Name)?
    (plusKeywords:["&"] | iteration:["?"|"*"|"+"] )*;


  interface ITerminal;

  astrule ITerminal =
      Name;

  /** A Terminal is usually something like "," or "start" */
  Terminal implements RuleComponent, ITerminal =
    (variableName:Name& "=" | usageName:Name&  ":")?
    name:String
    (iteration:["?"|"*"|"+"])*;


  /** Constants are constant string but lead to an attribute */
  Constant implements ITerminal =
    (humanName:Name& ":")? name:String ;

  /** constants are sth like keywords which one needs to know that they where there,
  e.g. public. In the ast-class they are reflected as int oder boolean isMethods  */
  ConstantGroup implements RuleComponent =
     (variableName:Name& "=" | usageName:Name&  ":")?
     "[" Constant ("|" Constant )* "]"
     (iteration:["?"|"*"|"+"])? ;

  /** MCAnything is a special lexer production which represents
  */
  MCAnything implements RuleComponent =
    "MCA";

  Anything implements RuleComponent=
    ".";

  /** Handed on as antlr action or predicate, realised by external JavaDSLParser */
  SemanticpredicateOrAction implements RuleComponent=
     "{" ExpressionPredicate "}" Predicate:["?"]
     |
      "{" Action "}"
     ;


  // ------------------------------------------------------------------------------
  // Concept


  /** The grammar can be extended by using concepts
  @attribute name Name of the concept
  @attribute concept The concept itself
  */
  Concept=
    "concept" Name& Concept:MCConcept;


  // --------------------------------------------------------------------------------
  // AST


  /** A ASTClassgenWithinGrammar additional information for the class generation
  process
  @attribute
  @attribute type Type this rule refers to
  @attribute aSTSuperInterface Super interfaces abstract syntax only
  @attribute aSTSuperClass Super productions abstract syntax only
  @attribute methods Methods to be added to the class generation
  @attribute attributeInAST Attributes to be added to the class generation
  @attribute method Sons to be added to the generation
  */
  ASTRule =
     "ast" type:Name
    (
      "astextends" aSTSuperClass:(GenericType || ",")+
    |
      "astimplements" aSTSuperInterface:(GenericType || ",")+
    )*
    (
      "=" ( Method | AttributeInAST )*
    )? ";";


  /** A method to be added to a certain ASTClass
  @attribute public True if method is public
  @attribute private True if method is private
  @attribute protected True if method is protected
  @attribute final True if method is final
  @attribute static True if method is static
  @attribute return Qualified name of the return type of the method
  @attribute name Name of the method
  @attribute parameter List of the parameters
  @attribute exceptions Lit of the thrown exceptions
  @attribute body Body of the Method (mostly a JavaLazy-Object)
  */
  Method=
      "method"
      (["public"] | ["private"] | ["protected"])?
      (["final"])?
      (["static"])?
      returnType:GenericType Name
      "(" (MethodParameter || ",")* ")"
      ("throws" exceptions:(GenericType || ",")+)?
      "{" body:Action "}" ; // Statements


  /** Formal parameter of a method
  @attribute type Qualified name of the type
  @attribute name Name of the parameter
  */
  MethodParameter =
    type:GenericType Name;


  /** New Sons (=another ASTClass or String) or changed type (changed on difference to
  the automatic inference rules) in ASTClass
  @attribute name Name of the son
  @attribute genericType Name of the referring type
  @attribute Iterate True if more than one son can be added (=list)
  @attribute card Cardinality

  */
  AttributeInAST =
    (Name  ":")?
    GenericType (Iterated:["*"]|Optional:["?"])?
    Card?;


  /**
  A GenericType represents an generic java type
  @attribute name List containing the name of the type
  @attribute genericType List of all type parameters
  @attribute dimension Array dimension of the type
  */
  GenericType  =
    (Name& || ".")+
    ("<" (GenericType || ",")+  ">")?
    {_aNode.setDimension(0);} ("[" "]"
      {_aNode.setDimension(_aNode.getDimension()+1);} )*;

  astrule GenericType =
    Dimension:int
    method public String toString() {
      return  de.monticore._grammar.HelperGrammar.printGenericType(this);
    }
    method public String getTypeName() {
      return de.monticore._grammar.HelperGrammar.printGenericType(this);
    }
    method public boolean isExternal() {
        return true;
    };

  // ------------------------------------------------------------------------------
  // Lexer

  LexAlt =
    (lexComponents:LexComponent)*;

  interface LexComponent;

  LexBlock implements LexComponent =
    (negate:["~"])? "("
    (
      (
        option:LexOption ("init" "{" initAction:Action "}")? // Statements
      |
        "init" "{" initAction:Action "}" // Statements
      )
      ":"
     )?
     lexAlts:(LexAlt || "|")+ ")"
     (iteration:["?"|"*"|"+"])?;

  LexCharRange implements LexComponent =
     (negate:["~"])? lowerChar:Char ".." upperChar:Char;

  LexChar implements LexComponent =
    (negate:["~"])? Char ;

  LexString implements LexComponent =
    string:String ;

  LexActionOrPredicate implements LexComponent =
     "{" ExpressionPredicate "}" Predicate:["?"]
     ;


  LexNonTerminal implements LexComponent =
    (variable:Name& "=")? Name ;

  LexSimpleIteration implements LexComponent =
    (LexString | LexChar) iteration:["?"|"*"|"+"];

  LexOption =
    "options" "{" iD:Name "=" value:Name ";" "}";

  // ------------------------------------------------------------------------------
  // Symbol Table

  SymbolDefinition =
    "@!" symbolKind:Name?;

} 
