/* (c) https://github.com/MontiCore/monticore */

package de.monticore.script;

grammar ScriptExample {

  //-- extractfile gen/WhiteSpaces.x
  token WS =
    (' '
    | '\t'
    |  '\r' '\n' // DOS
    | '\r'       // Macintosh
    | '\n'       // Unix
    ) :{_channel = HIDDEN;};
  //-- endfile gen/WhiteSpaces.x

  //-- extractfile gen/Token.x
  token Name = ('a'..'z'|'A'..'Z')+ ;

  token SIMPLESTRING = '\"' ('a'..'z'|'A'..'Z')*'\"';
  //-- endfile gen/Token.x

  //-- extractfile gen/LexicalsFragment.x
  token NUM_INT =
    ('0'..'9')+ (EXPONENT)? (SUFFIX)? ;

  fragment token SUFFIX =
    'f'|'F'|'d'|'D' ;

  fragment token EXPONENT =
    ('e'|'E') ('+'|'-')? ('0'..'9')+ ;
  //-- endfile gen/LexicalsFragment.x

  //-- extractfile gen/LexicalsAction.x
  token STRING = '"'
    ( ESC
    | ~('"' | '\\' | '\n' | '\r' )
	  )*
	  '"'
    :{setText(getText().substring(1, getText().length() - 1));};
  //-- endfile gen/LexicalsActions.x

  //-- extractfile gen/LexicalsAdaptedTypes1.x
  A = b:Name c:Name;

  token NUMBER =
  	('0'..'9')* '.' ('0'..'9')* 'f': float;

  A = b:NUMBER c:NUMBER*;
  //-- endfile gen/LexicalsAdaptedTypes1.x


  //-- extractfile gen/LexicalsAdaptedTypes2.x
  token
    CARDINALITY = ('0'..'9')+ | '*' :
    x -> int : { // Java code:
                 if (x.equals("*"))
                   return -1;
                 else
                   return Integer.parseInt(x.getText());
               };

  //-- endfile gen/LexicalsAdaptedTypes2.x

  //-- extractfile gen/Terminals.x
  A = "Hello"
    (who: "World" | who: "Tom")
    "!";

  B = ["initial"]?;
  //-- endfile gen/Terminals.x

  //-- extractfile gen/Enumerations1.x
  A = vis:[ PUBLIC:"+" | "public" |
            PRIVATE:"-" | "private"];
 //-- endfile gen/Enumerations1.x


  //-- extractfile gen/Enumerations2.x
  enum VISIBILITY =
    PUBLIC:"+" | "public" |
    PRIVATE:"-" | "private" ;
  A = vis:VISIBILITY;
  //-- endfile gen/Enumerations2.x

  //-- extractfile gen/AutomaticNaming1.x
  Automaton =
   "automaton" name:Name "{"
     ( state:State | transition:Transition )*
   "}";
  //-- endfile gen/AutomaticNaming1.x

  //-- extractfile gen/AutomaticNaming2.x
  Automaton =
   "automaton" Name "{"
     ( State | Transition )*
   "}";
  //-- endfile gen/AutomaticNaming2.x

  //-- extractfile gen/Sequence.x
  A;

  S = x:A y:A*;
  S = x:A "::=" y:A ("," y:A)*;
  //-- endfile gen/Sequence.x

  //-- extractfile gen/Interfaces.x
  interface I;
  A implements I = "...1";
  B implements I = "...2";
  C = I "...";
  //-- endfile gen/Interfaces.x

  //-- extractfile gen/InterfacesEquiv.x
  I = A | B;
  A = "...1";
  B = "...2";
  C = I "...";
  //-- endfile gen/InterfacesEquiv.x

  //-- extractfile gen/Subclassing.x
  A = "...1";
  B extends A = "...2";
  C = A;
  //-- endfile gen/Subclassing.x

  //-- extractfile gen/ASTRule.x
  State;
  astrule State =
	  reachableStates:State*
    method public boolean isReachable(State s) {
  	  return reachableStates.contains(sss);
  	};
  //-- endfile gen/ASTRule.x

  //-- extractfile gen/AbstractProd.x
    abstract AutomatonElement;

    State extends AutomatonElement = "..." ;

    Transition extends AutomatonElement = "..." ;
    //-- endfile gen/AbstractProd.x

  //-- extractfile gen/ExternalProd.x
  external Invariant;

  State =  "state" Name
    Invariant
    ( "<<" ["initial"] ">>" | "<<" ["final"] ">>" )* ";" ;
  //-- endfile gen/ExternalProd.x

  //-- extractfile gen/OptionalNTs.x
  A = B?;
  B = "x";
  C = (D | E);
  D = "y";
  E = "z";
  //-- endfile gen/OptionalNTs.x


}
