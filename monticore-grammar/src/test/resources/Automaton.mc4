/* (c) https://github.com/MontiCore/monticore */


grammar Automaton extends de.monticore.common.TestLexicals {

/** A ASTAutomaton represents a finite automaton
    @attribute Name Name of the automaton
    @attribute States List of states
    @attribute Transitions List of transitions
*/
symbol scope Automaton =
  "automaton" Name "{" (State | Transition)* "}" ;

/** A ASTState represents a state of a finite automaton
    @attribute Name Name of state
    @attribute Initial True if state is initial state
    @attribute Final True if state is a final state
    @attribute States List of sub states
    @attribute Transitions List of transitions
*/
symbol State =
  "state" Name
  
  (("<<" ["initial"] ">>" ) | ("<<" ["final"] ">>" ))*
  
  ( ("{" (State | Transition)* "}") | ";") ;


/** A ASTTransition represents a transition
    @attribute From Name of the state from which the transitions starts
    @attribute Input Activation signal for this transition
    @attribute To Name of the state to which the transitions goes
*/ 
Transition =
  from:Name@State "-" Name ">" to:Name@State ";";


  Transition2 extends Transition =
    "foo";
  
}
